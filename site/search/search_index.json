{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Financial Analysis System","text":"<p>This is your documentation homepage. Start adding your content here!</p>"},{"location":"#overview","title":"Overview","text":"<p>The Financial Analysis System is designed to:</p> <ul> <li>Automatically collect financial data for publicly traded companies</li> <li>Analyze financial statements and calculate key metrics</li> <li>Research industry trends and competitor analysis</li> <li>Generate professional financial research reports</li> <li>Fact-check reports for accuracy</li> </ul> <p>The system uses a multi-agent architecture where specialized agents work together to produce high-quality financial analysis reports.</p>"},{"location":"#key-components","title":"Key Components","text":""},{"location":"#agents","title":"Agents","text":"<p>The system is built around specialized agents that handle different aspects of the financial analysis workflow:</p> <ul> <li>Planner Agent: Creates research plans tailored to specific companies and industries</li> <li>Data Collection Agent: Gathers financial data from APIs and other sources</li> <li>Research Agent: Conducts web research on industry trends and market news</li> <li>Analysis Agent: Analyzes financial data to extract insights and identify trends</li> <li>Writer Agent: Generates well-structured, professional financial reports</li> <li>Fact Check Agent: Validates the accuracy of the financial report content</li> </ul>"},{"location":"#modules","title":"Modules","text":"<p>Core functionality is implemented in focused modules:</p> <ul> <li>Financial Analyzer: Processes and analyzes financial data</li> <li>Data Collector: Interfaces with financial data APIs</li> </ul>"},{"location":"#tools","title":"Tools","text":"<p>Helper utilities that support the core functionality:</p> <ul> <li>Data Transformer: Handles data conversion and cleaning</li> <li>Financial Data Provider: Communicates with financial data APIs</li> <li>Web Research Tool: Facilitates web searches for research</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See the Getting Started guide to set up the system and run your first financial analysis.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This API reference documents the key classes, methods, and interfaces in the Financial Analysis System. Use this reference to understand the available functionality and how to interact with different components of the system.</p>"},{"location":"api-reference/#agent-classes","title":"Agent Classes","text":""},{"location":"api-reference/#baseagent","title":"BaseAgent","text":"<p>The foundation class for all agent implementations.</p> <pre><code>class BaseAgent:\n    def __init__(self, role: str, agent_name: str, base_url: str = None, model_name: str = None)\n    def _call_llm(self, prompt: str, temperature: Optional[float] = None) -&gt; str\n    def process(self, input_data: Any) -&gt; Any\n    def reset_memory()\n</code></pre>"},{"location":"api-reference/#planneragent","title":"PlannerAgent","text":"<pre><code>class PlannerAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def create_research_plan(self, ticker: str, company_info: Dict[str, Any]) -&gt; Dict[str, Any]\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#datacollectionagent","title":"DataCollectionAgent","text":"<pre><code>class DataCollectionAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def determine_data_needs(self, ticker: str, research_plan: Dict[str, Any]) -&gt; Dict[str, Any]\n    def collect_company_data(self, ticker: str, data_plan: Dict[str, Any]) -&gt; Dict[str, Any]\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#researchagent","title":"ResearchAgent","text":"<pre><code>class ResearchAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def web_search(self, query: str, num_results: int = MAX_SEARCH_RESULTS) -&gt; List[Dict[str, Any]]\n    def research_company_news(self, ticker: str, company_name: str) -&gt; List[Dict[str, Any]]\n    def research_industry_trends(self, industry: str, sector: str) -&gt; Dict[str, Any]\n    def research_competitors(self, ticker: str, company_name: str, industry: str) -&gt; Dict[str, Any]\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#analysisagent","title":"AnalysisAgent","text":"<pre><code>class AnalysisAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def analyze_financial_data(self, financial_data: Dict[str, Any], research_plan: Dict[str, Any]) -&gt; Dict[str, Any]\n    def integrate_market_research(self, analysis_results: Dict[str, Any], research_results: Dict[str, Any]) -&gt; Dict[str, Any]\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#writeragent","title":"WriterAgent","text":"<pre><code>class WriterAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def generate_report_structure(self, ticker: str, company_info: Dict[str, Any], research_plan: Dict[str, Any]) -&gt; Dict[str, Any]\n    def write_report_section(self, section_name: str, section_template: Dict[str, Any], analysis_data: Dict[str, Any]) -&gt; str\n    def compile_full_report(self, report_template: Dict[str, Any], section_contents: Dict[str, str]) -&gt; str\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#factcheckagent","title":"FactCheckAgent","text":"<pre><code>class FactCheckAgent(BaseAgent):\n    def __init__(self, base_url: str = None, model_name: str = None)\n    def validate_financial_data(self, financial_data: Dict[str, Any], analysis_results: Dict[str, Any]) -&gt; Dict[str, Any]\n    def check_citations(self, report_content: str, financial_data: Dict[str, Any], research_data: Dict[str, Any]) -&gt; Dict[str, Any]\n    def add_citations(self, report_content: str, financial_data_sources: Dict[str, str]) -&gt; str\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#module-classes","title":"Module Classes","text":""},{"location":"api-reference/#financialanalyzer","title":"FinancialAnalyzer","text":"<pre><code>class FinancialAnalyzer:\n    def __init__()\n    def analyze_income_statement(self, income_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]\n    def analyze_balance_sheet(self, balance_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]\n    def analyze_cash_flow(self, cash_flow_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]\n    def analyze_technical_data(self, technical_data: Dict[str, Any]) -&gt; Dict[str, Any]\n    def comprehensive_analysis(self, financial_data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#financialdatacollector","title":"FinancialDataCollector","text":"<pre><code>class FinancialDataCollector:\n    def __init__()\n    def get_company_profile(self, ticker: str) -&gt; List[Dict[str, Any]]\n    def get_income_statement(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_balance_sheet(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_cash_flow(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_key_metrics(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_financial_ratios(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_stock_price(self, ticker: str, timeseries: int = 365) -&gt; Dict[str, Any]\n    def get_analyst_estimates(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_technical_indicators(self, ticker: str, indicator: str, time_period: int = 14) -&gt; Dict[str, Any]\n    def get_comprehensive_data(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#tool-classes","title":"Tool Classes","text":""},{"location":"api-reference/#financialdataprovider","title":"FinancialDataProvider","text":"<pre><code>class FinancialDataProvider:\n    def __init__()\n    def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -&gt; Dict[str, Any]\n    def get_company_profile(self, ticker: str) -&gt; List[Dict[str, Any]]\n    def get_income_statement(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_balance_sheet(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_cash_flow(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_key_metrics(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_financial_ratios(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_stock_price(self, ticker: str, timeseries: int = 365) -&gt; Dict[str, Any]\n    def get_analyst_estimates(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]\n    def get_technical_indicators(self, ticker: str, indicator: str, time_period: int = 14) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#webresearchtool","title":"WebResearchTool","text":"<pre><code>class WebResearchTool:\n    def __init__()\n    def search_google(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]\n    def search_news(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]\n    def get_company_competitors(self, company: str, industry: str) -&gt; List[Dict[str, Any]]\n    def get_industry_trends(self, industry: str) -&gt; List[Dict[str, Any]]\n</code></pre>"},{"location":"api-reference/#datatransformer","title":"DataTransformer","text":"<pre><code>class NumpyEncoder(json.JSONEncoder):\n    def default(self, obj) -&gt; Any\n\ndef convert_numpy_types(obj: Any) -&gt; Any\ndef clean_and_convert_numeric(df: pd.DataFrame) -&gt; pd.DataFrame\ndef dataframe_to_dict(df: pd.DataFrame) -&gt; List[Dict[str, Any]]\ndef prepare_data_for_report(data: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#system-class","title":"System Class","text":""},{"location":"api-reference/#financialanalysisorchestrator","title":"FinancialAnalysisOrchestrator","text":"<pre><code>class FinancialAnalysisOrchestrator:\n    def __init__()\n    def analyze_company(self, ticker: str) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api-reference/#configuration","title":"Configuration","text":""},{"location":"api-reference/#config-variables","title":"Config Variables","text":"<pre><code># API Keys\nOPENAI_API_KEY: str  # OpenAI API key for LLM access\nFMP_API_KEY: str     # Financial Modeling Prep API key\nSERPAPI_API_KEY: str # SerpAPI key for web searches\n\n# API Base URLs\nFMP_BASE_URL: str    # Financial Modeling Prep base URL\n\n# OpenAI Configuration\nOPENAI_MODEL: str    # Model name to use (default: gpt-4)\nOPENAI_TEMPERATURE: float  # Creativity level (default: 0.2)\nOPENAI_MAX_TOKENS: int     # Maximum tokens in response\n\n# Directories\nREPORTS_DIR: str     # Path to store generated reports\n\n# Agent Configuration\nAGENT_MEMORY_LIMIT: int  # Number of messages in agent memory\n\n# Research Configuration\nMAX_SEARCH_RESULTS: int  # Maximum search results to return\nMAX_RESEARCH_DEPTH: int  # Maximum research depth\n\n# Financial Data Configuration\nDEFAULT_PERIOD: str  # Default financial statement period\nDEFAULT_LIMIT: int   # Default number of periods to retrieve\nTECHNICAL_INDICATORS: List[str]  # Default technical indicators\n</code></pre>"},{"location":"api-reference/#command-line-interface","title":"Command Line Interface","text":""},{"location":"api-reference/#main-script","title":"Main Script","text":"<pre><code># Basic usage\npython main.py --ticker AAPL\n\n# With custom output directory\npython main.py --ticker MSFT --output /path/to/custom/directory\n</code></pre>"},{"location":"architecture/","title":"System Architecture","text":"<p>The Financial Analysis System follows a modular architecture based on specialized agents that collaborate to produce financial analysis reports.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    %% Define styles\n    classDef agent fill:#E1F5FE,stroke:#0277BD,stroke-width:2px;\n    classDef tool fill:#E8F5E9,stroke:#2E7D32,stroke-width:2px;\n    classDef data fill:#F5F5F5,stroke:#616161,stroke-width:2px;\n\n    %% User Input\n    UserInput[\"User Input&lt;br/&gt;(Ticker Symbol)\"]\n\n    %% Orchestrator\n    Orchestrator[\"Financial Analysis Orchestrator\"]\n\n    %% Agents\n    PlannerAgent[\"Planner Agent\"]:::agent\n    DataCollectionAgent[\"Data Collection&lt;br/&gt;Agent\"]:::agent\n    ResearchAgent[\"Research Agent\"]:::agent\n    AnalysisAgent[\"Analysis Agent\"]:::agent\n    WriterAgent[\"Writer Agent\"]:::agent\n    FactCheckAgent[\"Fact Check Agent\"]:::agent\n\n    %% Tools\n    FinancialProvider[\"Financial&lt;br/&gt;Data Provider\"]:::tool\n    WebResearch[\"Web Research\"]:::tool\n\n    %% Data\n    ResearchPlan[\"Research Plan\"]:::data\n    FinancialData[\"Financial Data\"]:::data\n    ResearchResults[\"Research Results\"]:::data\n    AnalysisResults[\"Analysis Results\"]:::data\n    Report[\"Report\"]:::data\n    FinalReport[\"Final Report\"]:::data\n\n    %% Flow\n    UserInput --&gt; Orchestrator\n    Orchestrator --&gt; PlannerAgent\n    Orchestrator --&gt; DataCollectionAgent\n    Orchestrator --&gt; ResearchAgent\n    Orchestrator --&gt; AnalysisAgent\n    Orchestrator --&gt; WriterAgent\n\n    PlannerAgent --&gt; ResearchPlan\n\n    DataCollectionAgent --&gt; FinancialProvider\n    FinancialProvider --&gt; FinancialData\n\n    ResearchAgent --&gt; WebResearch\n    WebResearch --&gt; ResearchResults\n\n    ResearchPlan --&gt; AnalysisAgent\n    FinancialData --&gt; AnalysisAgent\n    ResearchResults --&gt; AnalysisAgent\n    AnalysisAgent --&gt; AnalysisResults\n    AnalysisResults --&gt; WriterAgent\n    WriterAgent --&gt; Report\n    Report --&gt; FactCheckAgent\n    FactCheckAgent --&gt; FinalReport\n\n    %% Add subgraph for visual grouping\n    subgraph Agents\n        PlannerAgent\n        DataCollectionAgent\n        ResearchAgent\n        AnalysisAgent\n        WriterAgent\n    end</code></pre>"},{"location":"architecture/#workflow","title":"Workflow","text":"<p>The system follows this workflow:</p> <ol> <li>Orchestrator receives a ticker symbol and initializes the process</li> <li>Planner Agent creates a research plan tailored to the company</li> <li>Data Collection Agent gathers financial data based on the plan</li> <li>Research Agent conducts web research on the company and industry</li> <li>Analysis Agent processes financial data and integrates research insights</li> <li>Writer Agent generates a comprehensive financial report</li> <li>Fact Check Agent verifies the accuracy of the report</li> <li>Orchestrator delivers the final report</li> </ol>"},{"location":"architecture/#agent-communication","title":"Agent Communication","text":"<p>Agents communicate by passing structured data objects. Each agent takes specific inputs and produces outputs that other agents can consume:</p> <ul> <li>Planner Agent: Takes ticker and company info, outputs research plan</li> <li>Data Collection Agent: Takes ticker and research plan, outputs financial data</li> <li>Research Agent: Takes ticker and company profile, outputs research results</li> <li>Analysis Agent: Takes financial data and research results, outputs analysis</li> <li>Writer Agent: Takes analysis results, outputs draft report</li> <li>Fact Check Agent: Takes draft report and data, outputs verified report</li> </ul>"},{"location":"architecture/#dependencies","title":"Dependencies","text":"<p>The system relies on several external services and libraries:</p> <ul> <li>Financial Data: Financial Modeling Prep API</li> <li>Web Research: SerpAPI</li> <li>Natural Language Processing: OpenAI's LLM API</li> <li>Data Processing: Pandas and NumPy</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>This guide provides instructions for developers who want to contribute to the Financial Analysis System. Whether you're fixing bugs, adding new features, or improving documentation, your contributions are welcome!</p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<p>The Financial Analysis System follows a modular architecture with three main component types:</p> <ol> <li>Agents: LLM-powered components that handle reasoning, decision-making, and natural language processing</li> <li>Modules: Core computational components that process data without LLM interaction</li> <li>Tools: Utility functions and external service integrations</li> </ol> <pre><code>financial-analysis/\n\u251c\u2500\u2500 agents/                 # LLM-powered agent implementations\n\u2502   \u251c\u2500\u2500 base_agent.py       # Base class for all agents\n\u2502   \u251c\u2500\u2500 planner_agent.py    # Planning and research plan creation\n\u2502   \u251c\u2500\u2500 data_collection_agent.py  # Financial data collection\n\u2502   \u251c\u2500\u2500 research_agent.py   # Web research functionality\n\u2502   \u251c\u2500\u2500 analysis_agent.py   # Financial analysis and insights\n\u2502   \u251c\u2500\u2500 writer_agent.py     # Report generation\n\u2502   \u2514\u2500\u2500 fact_check_agent.py # Validation and fact-checking\n\u2502\n\u251c\u2500\u2500 modules/                # Core computational modules\n\u2502   \u251c\u2500\u2500 financial_analyzer.py  # Financial calculations and metrics\n\u2502   \u2514\u2500\u2500 data_collector.py   # Data collection coordination\n\u2502\n\u251c\u2500\u2500 tools/                  # Utility functions and external interfaces\n\u2502   \u251c\u2500\u2500 data_transformer.py # Data type handling and conversion\n\u2502   \u251c\u2500\u2500 financial_data_provider.py  # Financial API integration\n\u2502   \u2514\u2500\u2500 web_research.py     # Web search functionality\n\u2502\n\u251c\u2500\u2500 utils/                  # Helper utilities\n\u2502   \u2514\u2500\u2500 search.py           # Search client implementation\n\u2502\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 reports/                # Generated reports\n\u251c\u2500\u2500 tests/                  # Test suites\n\u251c\u2500\u2500 orchestrator.py         # Main workflow orchestration\n\u251c\u2500\u2500 main.py                 # Entry point script\n\u251c\u2500\u2500 config.py               # Configuration settings\n\u2514\u2500\u2500 requirements.txt        # Dependencies\n</code></pre>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/yourusername/financial-analysis.git\ncd financial-analysis\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> file with required API keys:    <pre><code>OPENAI_API_KEY=your_openai_api_key\nOPENAI_BASE_URL=your_openai_base_url\nOPENAI_MODEL_NAME=gpt-4\n\nSERPAPI_API_KEY=your_serpapi_api_key\nFMP_API_KEY=your_financial_modeling_prep_api_key\n</code></pre></p> </li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<p>The project follows these coding standards:</p> <ol> <li>PEP 8 for Python style guidelines</li> <li>Type hints for all function parameters and return values</li> <li>Docstrings for all classes and functions (Google docstring format)</li> <li>Error handling with specific exception types and meaningful error messages</li> <li>Logging for significant events and potential issues</li> </ol> <p>Example function with proper style:</p> <pre><code>def analyze_data(data: List[Dict[str, Any]], metrics: List[str]) -&gt; Dict[str, float]:\n    \"\"\"\n    Analyze financial data using specified metrics.\n\n    Args:\n        data (List[Dict[str, Any]]): The financial data to analyze\n        metrics (List[str]): Metrics to calculate\n\n    Returns:\n        Dict[str, float]: Calculated metrics\n\n    Raises:\n        ValueError: If data is empty or metrics list is empty\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not metrics:\n        raise ValueError(\"At least one metric must be specified\")\n\n    result = {}\n    # Implementation...\n    return result\n</code></pre>"},{"location":"contributing/#adding-new-components","title":"Adding New Components","text":""},{"location":"contributing/#adding-a-new-agent","title":"Adding a New Agent","text":"<ol> <li>Create a new Python file in the <code>agents</code> directory</li> <li>Import and inherit from <code>BaseAgent</code></li> <li>Implement the <code>process</code> method and any required helper methods</li> <li>Add the agent to the orchestrator workflow if needed</li> </ol> <p>Example: <pre><code>from agents.base_agent import BaseAgent\n\nclass MyCustomAgent(BaseAgent):\n    \"\"\"A custom agent that does something specific.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a specialist that performs a specific task\"\n        super().__init__(role, \"Custom Agent\", base_url=base_url, model_name=model_name)\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data and return results.\"\"\"\n        # Implementation...\n        return {\"result\": \"processed data\"}\n</code></pre></p>"},{"location":"contributing/#adding-a-new-tool","title":"Adding a New Tool","text":"<ol> <li>Create a new Python file in the <code>tools</code> directory</li> <li>Implement a class or functions for the tool's functionality</li> <li>Add clear docstrings and error handling</li> <li>Import and use the tool in relevant agents or modules</li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<p>The project uses Python's <code>unittest</code> framework for testing:</p> <ol> <li>Write tests in the <code>tests</code> directory</li> <li>Run tests using:    <pre><code>python -m unittest discover\n</code></pre></li> </ol> <p>Example test: <pre><code>import unittest\nfrom modules.financial_analyzer import FinancialAnalyzer\n\nclass TestFinancialAnalyzer(unittest.TestCase):\n    def setUp(self):\n        self.analyzer = FinancialAnalyzer()\n        self.sample_data = [...]\n\n    def test_income_statement_analysis(self):\n        result = self.analyzer.analyze_income_statement(self.sample_data)\n        self.assertIn('summary', result)\n        self.assertIn('growth', result)\n        self.assertEqual(result['summary']['latest_revenue'], 1000000)\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The project uses MkDocs with the Material theme for documentation:</p> <ol> <li>Write documentation in Markdown format in the <code>docs</code> directory</li> <li>Build documentation with:    <pre><code>mkdocs build\n</code></pre></li> <li>View documentation locally with:    <pre><code>mkdocs serve\n</code></pre></li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a branch for your feature or fix</li> <li>Implement your changes following the coding standards</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> <li>Ensure all tests pass and the code lints without errors</li> <li>Submit a pull request with a clear description of the changes</li> </ol>"},{"location":"contributing/#feature-requests-and-bug-reports","title":"Feature Requests and Bug Reports","text":"<p>Use the GitHub Issues system to report bugs or suggest features:</p> <ul> <li>Bug reports: Include steps to reproduce, expected behavior, and actual behavior</li> <li>Feature requests: Describe the feature, its benefits, and possible implementation approaches</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the same license as the project.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and run the Financial Analysis System.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>API keys for:</li> <li>OpenAI (or compatible LLM API)</li> <li>Financial Modeling Prep</li> <li>SerpAPI (for web search capabilities)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/financial-analysis.git\ncd financial-analysis\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Create a <code>.env</code> file with your API keys:</li> </ol> <pre><code>OPENAI_API_KEY=your_openai_api_key\nOPENAI_BASE_URL=your_openai_base_url_or_openai_default\nOPENAI_MODEL_NAME=gpt-4\n\nSERPAPI_API_KEY=your_serpapi_api_key\nFMP_API_KEY=your_financial_modeling_prep_api_key\n</code></pre>"},{"location":"getting-started/#running-your-first-analysis","title":"Running Your First Analysis","text":"<p>To analyze a company, use the main script with the ticker symbol:</p> <pre><code>python main.py --ticker AAPL\n</code></pre> <p>This will:</p> <ol> <li>Collect financial data for Apple Inc.</li> <li>Research current market trends and news</li> <li>Analyze the financial data</li> <li>Generate a comprehensive financial analysis report</li> <li>Save the report in the <code>./reports</code> directory as <code>AAPL_analysis.md</code></li> </ol>"},{"location":"getting-started/#example-output","title":"Example Output","text":"<p>After running the analysis, you'll see output like:</p> <pre><code>==================================================\nAnalysis for AAPL completed successfully!\nFull report saved to: /workspaces/codespaces-blank/reports/AAPL_analysis.md\nResults summary saved to: /workspaces/codespaces-blank/reports/AAPL_results.json\n==================================================\n</code></pre> <p>The generated report will be in Markdown format, making it easy to convert to other formats or view directly on platforms like GitHub.</p>"},{"location":"getting-started/#customization-options","title":"Customization Options","text":""},{"location":"getting-started/#output-directory","title":"Output Directory","text":"<p>By default, reports are saved to the <code>./reports</code> directory. You can specify a different directory:</p> <pre><code>python main.py --ticker AAPL --output /path/to/custom/directory\n</code></pre>"},{"location":"getting-started/#advanced-configuration","title":"Advanced Configuration","text":"<p>You can modify the system behavior by editing configuration options in <code>config.py</code>:</p> <ul> <li><code>DEFAULT_PERIOD</code>: Choose between \"annual\" or \"quarter\" for financial statements</li> <li><code>DEFAULT_LIMIT</code>: Number of historical periods to retrieve</li> <li><code>TECHNICAL_INDICATORS</code>: List of technical indicators to calculate</li> <li><code>OPENAI_TEMPERATURE</code>: Controls randomness in LLM responses</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#api-key-issues","title":"API Key Issues","text":"<p>If you encounter errors related to API keys, ensure:</p> <ol> <li>Your <code>.env</code> file contains all required API keys</li> <li>The API keys are valid and have sufficient credits</li> <li>For custom LLM endpoints, verify the base URL is accessible</li> </ol>"},{"location":"getting-started/#missing-financial-data","title":"Missing Financial Data","text":"<p>If financial data is missing:</p> <ol> <li>Verify the ticker symbol is correct</li> <li>Check if your Financial Modeling Prep API key has access to the required endpoints</li> <li>Some smaller companies may have limited financial data available</li> </ol>"},{"location":"getting-started/#memory-or-performance-issues","title":"Memory or Performance Issues","text":"<p>For performance issues:</p> <ol> <li>Consider reducing <code>DEFAULT_LIMIT</code> to retrieve fewer historical periods</li> <li>Limit technical indicators to only those you need</li> <li>For large reports, increase your system's available memory</li> </ol>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides detailed instructions on how to use the Financial Analysis System for different scenarios.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#generating-a-standard-financial-report","title":"Generating a Standard Financial Report","text":"<p>To generate a standard financial report for a company, use the main script with a ticker symbol:</p> <pre><code>python main.py --ticker AAPL\n</code></pre> <p>The system will:</p> <ol> <li>Generate a research plan for the company</li> <li>Collect financial data based on the plan</li> <li>Research the company's industry and competitors</li> <li>Analyze the financial data</li> <li>Create a comprehensive report</li> <li>Save the report to the <code>reports</code> directory</li> </ol>"},{"location":"usage/#customizing-report-output-location","title":"Customizing Report Output Location","text":"<p>You can specify a custom output location for the reports:</p> <pre><code>python main.py --ticker MSFT --output /path/to/custom/directory\n</code></pre>"},{"location":"usage/#working-with-the-generated-reports","title":"Working with the Generated Reports","text":""},{"location":"usage/#report-format","title":"Report Format","text":"<p>The system generates two output files:</p> <ol> <li>Markdown Report (<code>TICKER_analysis.md</code>): A human-readable report with financial analysis</li> <li>JSON Results (<code>TICKER_results.json</code>): Structured data containing all analysis results</li> </ol> <p>The Markdown report can be: - Converted to PDF or other formats using tools like Pandoc - Published on websites or wikis - Shared with stakeholders directly</p> <p>The JSON results can be: - Used for further programmatic analysis - Imported into dashboards - Used to compare multiple companies</p>"},{"location":"usage/#converting-to-pdf","title":"Converting to PDF","text":"<p>To convert the Markdown report to a PDF, install Pandoc and use:</p> <pre><code>pandoc reports/AAPL_analysis.md -o reports/AAPL_analysis.pdf\n</code></pre>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#accessing-individual-components","title":"Accessing Individual Components","text":"<p>You can use the individual components of the system in your own code:</p> <pre><code>from orchestrator import FinancialAnalysisOrchestrator\n\n# Initialize the orchestrator\norchestrator = FinancialAnalysisOrchestrator()\n\n# Analyze a company\nresults = orchestrator.analyze_company(\"AAPL\")\n\n# Access different parts of the results\ncompany_profile = results[\"company_profile\"]\nfinancial_data = results[\"financial_data\"]\nanalysis = results[\"analysis_results\"]\nreport = results[\"report\"]\n\n# Do something with the components\nprint(f\"Company: {company_profile[0]['companyName']}\")\nprint(f\"Current Price: ${company_profile[0]['price']}\")\n</code></pre>"},{"location":"usage/#using-the-financial-data-collector","title":"Using the Financial Data Collector","text":"<p>You can use the Financial Data Collector directly:</p> <pre><code>from modules.data_collector import FinancialDataCollector\n\n# Initialize the collector\ncollector = FinancialDataCollector()\n\n# Get specific data\nincome_statement = collector.get_income_statement(\"AAPL\", period=\"annual\", limit=5)\nbalance_sheet = collector.get_balance_sheet(\"AAPL\", period=\"annual\", limit=5)\ncash_flow = collector.get_cash_flow(\"AAPL\", period=\"annual\", limit=5)\n\n# Get comprehensive data\nall_data = collector.get_comprehensive_data(\"AAPL\", period=\"annual\", limit=5)\n</code></pre>"},{"location":"usage/#using-the-financial-analyzer","title":"Using the Financial Analyzer","text":"<p>You can use the Financial Analyzer independently:</p> <pre><code>from modules.financial_analyzer import FinancialAnalyzer\n\n# Initialize the analyzer\nanalyzer = FinancialAnalyzer()\n\n# Analyze financial data\nanalysis = analyzer.comprehensive_analysis(financial_data)\n\n# Access specific analyses\nincome_analysis = analysis[\"income_analysis\"]\nbalance_sheet_analysis = analysis[\"balance_sheet_analysis\"]\ncash_flow_analysis = analysis[\"cash_flow_analysis\"]\n</code></pre>"},{"location":"usage/#integrating-with-other-systems","title":"Integrating with Other Systems","text":""},{"location":"usage/#api-integration","title":"API Integration","text":"<p>While the system doesn't include a built-in API, you can integrate it with an API framework like Flask or FastAPI:</p> <pre><code>from flask import Flask, request, jsonify\nfrom orchestrator import FinancialAnalysisOrchestrator\n\napp = Flask(__name__)\norchestrator = FinancialAnalysisOrchestrator()\n\n@app.route('/analyze/&lt;ticker&gt;', methods=['GET'])\ndef analyze_company(ticker):\n    results = orchestrator.analyze_company(ticker)\n    return jsonify({\n        'ticker': ticker,\n        'company_name': results['company_profile'][0]['companyName'],\n        'report': results['report']\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"usage/#batch-processing","title":"Batch Processing","text":"<p>For analyzing multiple companies:</p> <pre><code>from orchestrator import FinancialAnalysisOrchestrator\nimport os\n\n# Initialize the orchestrator\norchestrator = FinancialAnalysisOrchestrator()\n\n# List of tickers to analyze\ntickers = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\n\n# Output directory\noutput_dir = \"batch_reports\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Process each ticker\nfor ticker in tickers:\n    print(f\"Analyzing {ticker}...\")\n    try:\n        results = orchestrator.analyze_company(ticker)\n        print(f\"Completed {ticker}\")\n    except Exception as e:\n        print(f\"Error analyzing {ticker}: {str(e)}\")\n</code></pre>"},{"location":"usage/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Analysis for a single company typically takes 1-5 minutes depending on complexity</li> <li>Web research is the most time-consuming step and depends on internet connectivity</li> <li>LLM calls can sometimes timeout; retry mechanisms are built into the system</li> <li>JSON serialization of large datasets can be memory-intensive</li> </ul>"},{"location":"usage/#common-patterns-and-best-practices","title":"Common Patterns and Best Practices","text":"<ol> <li>API Key Security: Never commit your <code>.env</code> file to version control</li> <li>Error Handling: Always check for the <code>error</code> key in returned results</li> <li>Data Validation: Verify financial data is available before proceeding with analysis</li> <li>Report Post-processing: Consider additional formatting or style improvements to reports</li> <li>Memory Management: For batch processing, consider implementing garbage collection</li> </ol>"},{"location":"agents/","title":"Agents Overview","text":"<p>The Financial Analysis System uses a multi-agent architecture where specialized agents work together to produce comprehensive financial analysis reports. Each agent is designed to handle a specific part of the workflow, allowing for modular design and focused expertise.</p>"},{"location":"agents/#agent-architecture","title":"Agent Architecture","text":"<p>All agents in the system inherit from the <code>BaseAgent</code> class, which provides common functionality:</p> <ul> <li>Communication with the LLM</li> <li>Conversation memory management</li> <li>Standard input/output formats</li> <li>Error handling</li> </ul>"},{"location":"agents/#agent-types","title":"Agent Types","text":"<p>The system includes the following specialized agents:</p>"},{"location":"agents/#planner-agent","title":"Planner Agent","text":"<p>Creates research plans tailored to specific companies and industries. The Planner Agent determines what data needs to be collected and analyzed for each company, considering its industry, size, and other factors.</p>"},{"location":"agents/#data-collection-agent","title":"Data Collection Agent","text":"<p>Gathers financial data from APIs and other sources based on the research plan. This agent interacts with the Financial Data Provider to retrieve comprehensive financial information about the company.</p>"},{"location":"agents/#research-agent","title":"Research Agent","text":"<p>Conducts web research on industry trends and market news. The Research Agent uses search APIs to gather current information about the company, its competitors, and industry trends that might impact its financial performance.</p>"},{"location":"agents/#analysis-agent","title":"Analysis Agent","text":"<p>Analyzes financial data to extract insights and identify trends. This agent combines algorithmic financial analysis with LLM-powered qualitative analysis to provide comprehensive insights.</p>"},{"location":"agents/#writer-agent","title":"Writer Agent","text":"<p>Generates well-structured, professional financial reports. The Writer Agent takes analysis results and transforms them into a coherent, readable report in Markdown format.</p>"},{"location":"agents/#fact-check-agent","title":"Fact Check Agent","text":"<p>Validates the accuracy of the financial report content. This agent verifies factual claims, adds proper citations, and improves the overall quality of the report.</p>"},{"location":"agents/#agent-communication","title":"Agent Communication","text":"<p>Agents communicate through structured JSON objects that are passed through the Orchestrator. Each agent's output becomes input to the next agent in the workflow:</p> <pre><code>Planner \u2192 Data Collection \u2192 Research \u2192 Analysis \u2192 Writer \u2192 Fact Check\n</code></pre>"},{"location":"agents/#extending-the-agent-system","title":"Extending the Agent System","text":"<p>To add a new agent type to the system:</p> <ol> <li>Create a new class that inherits from <code>BaseAgent</code></li> <li>Implement the <code>process</code> method to handle specific functionality</li> <li>Add the agent to the Orchestrator workflow</li> </ol> <p>See the Contributing guide for more information on extending the agent system.</p>"},{"location":"agents/analysis_agent/","title":"Analysis Agent","text":"<p>The Analysis Agent is responsible for analyzing financial data and generating insights. It combines algorithmic financial analysis with LLM-powered qualitative assessments to produce comprehensive financial analysis.</p>"},{"location":"agents/analysis_agent/#functionality","title":"Functionality","text":"<p>The Analysis Agent:</p> <ol> <li>Receives financial data and research results</li> <li>Performs quantitative analysis of financial statements and metrics</li> <li>Uses LLM to generate qualitative insights and interpretations</li> <li>Integrates financial analysis with market research</li> <li>Returns comprehensive analysis results</li> </ol>"},{"location":"agents/analysis_agent/#implementation","title":"Implementation","text":"<p>The Analysis Agent is implemented in the <code>AnalysisAgent</code> class:</p> <pre><code>class AnalysisAgent(BaseAgent):\n    \"\"\"Agent responsible for analyzing financial data and generating insights.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a financial analyst that interprets financial data and identifies key trends and insights\"\n        super().__init__(role, \"Financial Analyst\", base_url=base_url, model_name=model_name)\n        self.analyzer = FinancialAnalyzer()\n\n    def analyze_financial_data(self, financial_data: Dict[str, Any], research_plan: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze financial data based on the research plan.\"\"\"\n        # Implementation details...\n\n    def integrate_market_research(self, analysis_results: Dict[str, Any], research_results: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Integrate market research with financial analysis.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data to analyze financial information.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/analysis_agent/#input","title":"Input","text":"<p>The Analysis Agent takes a JSON object containing:</p> <pre><code>{\n  \"financial_data\": {\n    \"company_profile\": [...],\n    \"income_statement\": [...],\n    \"balance_sheet\": [...],\n    \"cash_flow\": [...],\n    \"key_metrics\": [...],\n    \"stock_price\": {...},\n    \"technical_indicators\": {...}\n  },\n  \"research_results\": {\n    \"company_news\": [...],\n    \"industry_trends\": {...},\n    \"competitor_analysis\": {...}\n  },\n  \"research_plan\": {...}\n}\n</code></pre>"},{"location":"agents/analysis_agent/#output","title":"Output","text":"<p>The Analysis Agent produces comprehensive analysis results:</p> <pre><code>{\n  \"financial_analysis\": {\n    \"quantitative_analysis\": {\n      \"income_analysis\": {\n        \"summary\": {\n          \"latest_revenue\": 383946000000,\n          \"latest_net_income\": 96995000000\n        },\n        \"growth\": {\n          \"revenue_growth\": 2.02,\n          \"net_income_growth\": -3.36\n        },\n        \"margins\": {\n          \"gross_margin\": 46.21,\n          \"operating_margin\": 31.51,\n          \"profit_margin\": 24.79\n        }\n      },\n      \"balance_sheet_analysis\": {...},\n      \"cash_flow_analysis\": {...},\n      \"technical_analysis\": {...}\n    },\n    \"qualitative_analysis\": {\n      \"significant_trends\": [\n        \"Steady revenue growth despite market headwinds\",\n        \"Expanding profit margins due to services growth\"\n      ],\n      \"financial_strengths\": [\n        \"Strong cash generation\",\n        \"High return on equity\",\n        \"Minimal debt leverage\"\n      ],\n      \"financial_weaknesses\": [\n        \"Slowing growth in key product categories\",\n        \"Increasing R&amp;D expenses\"\n      ],\n      \"anomalies\": [\n        \"Unusual increase in accounts receivable\"\n      ]\n    }\n  },\n  \"market_research\": {...},\n  \"integrated_insights\": {\n    \"market_financial_connections\": [\n      \"Strong correlation between service revenue growth and industry trend toward subscription models\",\n      \"Increasing R&amp;D aligns with industry shift toward AI integration\"\n    ],\n    \"competitive_position\": {\n      \"financial_advantages\": [\n        \"Higher profit margins than industry average (24.79% vs 15.3%)\",\n        \"Stronger cash position relative to competitors\"\n      ],\n      \"financial_disadvantages\": [\n        \"Lower revenue growth than emerging competitors\",\n        \"Higher exposure to certain supply chain risks\"\n      ]\n    },\n    \"outlook\": {\n      \"short_term\": \"Stable financial performance expected with moderate growth\",\n      \"long_term\": \"Well positioned for industry shifts with strong balance sheet\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/analysis_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/analysis_agent/#analyze_financial_datafinancial_data-research_plan","title":"<code>analyze_financial_data(financial_data, research_plan)</code>","text":"<p>Performs comprehensive analysis of financial data:</p> <ol> <li>Uses the FinancialAnalyzer module to perform quantitative analysis</li> <li>Extracts company information from the data</li> <li>Uses LLM to generate qualitative insights about the financial data</li> <li>Combines quantitative metrics with qualitative assessments</li> </ol>"},{"location":"agents/analysis_agent/#integrate_market_researchanalysis_results-research_results","title":"<code>integrate_market_research(analysis_results, research_results)</code>","text":"<p>Integrates financial analysis with market research:</p> <ol> <li>Identifies connections between financial performance and market events/trends</li> <li>Evaluates how competitive position affects financial results</li> <li>Assesses how industry trends might impact future financial performance</li> <li>Determines if financial data aligns with or contradicts market perception</li> <li>Provides a holistic assessment of the company's position and outlook</li> </ol>"},{"location":"agents/analysis_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts financial data, research results, and research plan</li> <li>Analyzes the financial data</li> <li>Integrates with market research if available</li> <li>Returns comprehensive analysis results</li> </ol>"},{"location":"agents/analysis_agent/#financial-analysis","title":"Financial Analysis","text":"<p>The Analysis Agent uses the FinancialAnalyzer module to perform quantitative analysis, which includes:</p> <ul> <li>Income statement analysis (revenue trends, profit margins, growth rates)</li> <li>Balance sheet analysis (liquidity, leverage, asset efficiency)</li> <li>Cash flow analysis (operating cash flow, free cash flow, cash usage)</li> <li>Technical indicators analysis (moving averages, RSI, MACD, etc.)</li> </ul>"},{"location":"agents/analysis_agent/#json-serialization","title":"JSON Serialization","text":"<p>The Analysis Agent employs special handling for NumPy data types through:</p> <ol> <li>The DataTransformer's NumpyEncoder for proper JSON serialization</li> <li>The convert_numpy_types function to ensure all data is JSON-serializable</li> </ol> <p>This prevents common errors like \"Object of type int64 is not JSON serializable.\"</p>"},{"location":"agents/analysis_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.analysis_agent import AnalysisAgent\n\n# Initialize the agent\nanalyst = AnalysisAgent()\n\n# Create input data\ninput_data = {\n    \"financial_data\": collected_financial_data,\n    \"research_results\": research_results,\n    \"research_plan\": research_plan\n}\n\n# Perform analysis\nanalysis_results = analyst.process(input_data)\n\n# Access analysis components\nquantitative = analysis_results.get(\"financial_analysis\", {}).get(\"quantitative_analysis\", {})\nqualitative = analysis_results.get(\"financial_analysis\", {}).get(\"qualitative_analysis\", {})\nintegrated = analysis_results.get(\"integrated_insights\", {})\n\n# Use the analysis results\nprint(f\"Revenue growth: {quantitative.get('income_analysis', {}).get('growth', {}).get('revenue_growth')}%\")\nprint(f\"Key strength: {qualitative.get('financial_strengths', [''])[0]}\")\n</code></pre>"},{"location":"agents/data_collection_agent/","title":"Data Collection Agent","text":"<p>The Data Collection Agent is responsible for gathering financial data from various sources, primarily through financial APIs. It works with the Financial Data Provider tool to retrieve comprehensive financial information about companies.</p>"},{"location":"agents/data_collection_agent/#functionality","title":"Functionality","text":"<p>The Data Collection Agent:</p> <ol> <li>Receives a ticker symbol and a research plan</li> <li>Determines what specific data needs to be collected based on the plan</li> <li>Retrieves financial statements, price data, technical indicators, and other metrics</li> <li>Returns structured financial data for analysis</li> </ol>"},{"location":"agents/data_collection_agent/#implementation","title":"Implementation","text":"<p>The Data Collection Agent is implemented in the <code>DataCollectionAgent</code> class:</p> <pre><code>class DataCollectionAgent(BaseAgent):\n    \"\"\"Agent responsible for collecting financial data.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a financial data collection specialist that gathers accurate financial information\"\n        super().__init__(role, \"Data Collection\", base_url=base_url, model_name=model_name)\n        self.collector = FinancialDataCollector()\n\n    def determine_data_needs(self, ticker: str, research_plan: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Determine what data needs to be collected based on the research plan.\"\"\"\n        # Implementation details...\n\n    def collect_company_data(self, ticker: str, data_plan: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Collect data for a company based on the data collection plan.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data to collect financial information.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/data_collection_agent/#input","title":"Input","text":"<p>The Data Collection Agent takes a JSON object containing:</p> <pre><code>{\n  \"ticker\": \"AAPL\",\n  \"research_plan\": {\n    \"financial_analysis\": {\n      \"income_statement\": { \"focus_areas\": [\"Revenue growth\"] },\n      \"balance_sheet\": { \"focus_areas\": [\"Cash reserves\"] }\n    },\n    \"technical_analysis\": {\n      \"indicators\": [\"SMA\", \"RSI\"]\n    }\n  }\n}\n</code></pre>"},{"location":"agents/data_collection_agent/#output","title":"Output","text":"<p>The Data Collection Agent produces structured financial data:</p> <pre><code>{\n  \"ticker\": \"AAPL\",\n  \"company_profile\": [{\n    \"companyName\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\",\n    \"price\": 182.63,\n    \"mktCap\": 2845000000000,\n    \"beta\": 1.28\n  }],\n  \"income_statement\": [\n    {\n      \"date\": \"2023-09-30\",\n      \"revenue\": 383946000000,\n      \"grossProfit\": 170782000000,\n      \"netIncome\": 96995000000\n    },\n    {\n      \"date\": \"2022-09-30\",\n      \"revenue\": 394328000000,\n      \"grossProfit\": 170782000000,\n      \"netIncome\": 99803000000\n    }\n  ],\n  \"balance_sheet\": [\n    {\n      \"date\": \"2023-09-30\",\n      \"totalAssets\": 352583000000,\n      \"totalLiabilities\": 290448000000,\n      \"totalStockholdersEquity\": 62135000000,\n      \"cashAndCashEquivalents\": 29965000000\n    }\n  ],\n  \"technical_indicators\": {\n    \"sma\": {\n      \"historical\": [\n        {\n          \"date\": \"2023-12-15\",\n          \"sma\": 187.32\n        }\n      ]\n    },\n    \"rsi\": {\n      \"historical\": [\n        {\n          \"date\": \"2023-12-15\",\n          \"rsi\": 54.78\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"agents/data_collection_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/data_collection_agent/#determine_data_needsticker-research_plan","title":"<code>determine_data_needs(ticker, research_plan)</code>","text":"<p>Uses LLM to analyze the research plan and determine what specific data needs to be collected:</p> <ol> <li>Identifies which financial statements are needed</li> <li>Determines what period and limit settings to use</li> <li>Lists technical indicators to calculate</li> <li>Specifies ratios and metrics that should be collected</li> <li>Identifies any competitor tickers that should also be analyzed</li> </ol>"},{"location":"agents/data_collection_agent/#collect_company_dataticker-data_plan","title":"<code>collect_company_data(ticker, data_plan)</code>","text":"<p>Executes the data collection plan by:</p> <ol> <li>Retrieving company profile information</li> <li>Collecting required financial statements (income statement, balance sheet, cash flow)</li> <li>Getting key metrics and financial ratios</li> <li>Calculating technical indicators</li> <li>Retrieving analyst estimates and stock price data</li> <li>Optionally collecting data for competitor companies</li> </ol>"},{"location":"agents/data_collection_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts the ticker symbol and research plan</li> <li>Determines the data collection needs</li> <li>Executes the data collection</li> <li>Returns the comprehensive financial data</li> </ol>"},{"location":"agents/data_collection_agent/#data-sources","title":"Data Sources","text":"<p>The Data Collection Agent primarily uses the Financial Modeling Prep API through the Financial Data Provider tool. Alternative data sources can be added by extending the Financial Data Provider.</p>"},{"location":"agents/data_collection_agent/#error-handling","title":"Error Handling","text":"<p>The agent handles various data collection errors:</p> <ol> <li>Missing or invalid ticker symbols</li> <li>API rate limits or connectivity issues</li> <li>Incomplete or missing financial statements</li> <li>Timeouts during data retrieval</li> </ol>"},{"location":"agents/data_collection_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.data_collection_agent import DataCollectionAgent\n\n# Initialize the agent\ncollector = DataCollectionAgent()\n\n# Create input data\ninput_data = {\n    \"ticker\": \"AAPL\",\n    \"research_plan\": {\n        \"financial_analysis\": {\n            \"income_statement\": { \"focus_areas\": [\"Revenue growth\"] }\n        }\n    }\n}\n\n# Collect the financial data\nfinancial_data = collector.process(input_data)\n\n# Access specific data\nincome_statement = financial_data.get(\"income_statement\", [])\nprint(f\"Latest revenue: ${income_statement[0]['revenue'] / 1000000000:.2f} billion\")\n</code></pre>"},{"location":"agents/fact_check_agent/","title":"Fact Check Agent","text":"<p>The Fact Check Agent is responsible for validating the accuracy of the financial analysis report. It acts as a quality control component, verifying factual claims and improving the report's accuracy and credibility.</p>"},{"location":"agents/fact_check_agent/#functionality","title":"Functionality","text":"<p>The Fact Check Agent:</p> <ol> <li>Receives the draft report along with the financial data and analysis results</li> <li>Validates financial data and claims in the report against source data</li> <li>Identifies uncited claims or statements that require verification</li> <li>Adds appropriate citations to factual statements</li> <li>Returns an improved version of the report with validation results</li> </ol>"},{"location":"agents/fact_check_agent/#implementation","title":"Implementation","text":"<p>The Fact Check Agent is implemented in the <code>FactCheckAgent</code> class:</p> <pre><code>class FactCheckAgent(BaseAgent):\n    \"\"\"Agent responsible for fact-checking and validating reports.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a financial fact-checking specialist that verifies and validates financial information\"\n        super().__init__(role, \"Fact Checker\", base_url=base_url, model_name=model_name)\n\n    def validate_financial_data(self, financial_data: Dict[str, Any], analysis_results: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Validate the financial data and analysis results for accuracy.\"\"\"\n        # Implementation details...\n\n    def check_citations(self, report_content: str, financial_data: Dict[str, Any], research_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Check that all factual claims in the report are properly cited.\"\"\"\n        # Implementation details...\n\n    def add_citations(self, report_content: str, financial_data_sources: Dict[str, str]) -&gt; str:\n        \"\"\"Add proper citations to the report content.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data to fact check and validate the analysis and report.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/fact_check_agent/#input","title":"Input","text":"<p>The Fact Check Agent takes a JSON object containing:</p> <pre><code>{\n  \"report\": \"# Financial Analysis: Apple Inc. (AAPL)\\n\\n**Date:** March 10, 2025\\n\\n## Executive Summary\\n\\n...\",\n  \"financial_data\": {\n    \"income_statement\": [...],\n    \"balance_sheet\": [...],\n    \"cash_flow\": [...],\n    \"stock_price\": {...},\n    \"technical_indicators\": {...}\n  },\n  \"analysis_results\": {\n    \"financial_analysis\": {...},\n    \"market_research\": {...},\n    \"integrated_insights\": {...}\n  },\n  \"research_results\": {\n    \"company_news\": [...],\n    \"industry_trends\": {...},\n    \"competitor_analysis\": {...}\n  }\n}\n</code></pre>"},{"location":"agents/fact_check_agent/#output","title":"Output","text":"<p>The Fact Check Agent produces validation results and an improved report:</p> <pre><code>{\n  \"validation_results\": {\n    \"is_valid\": true,\n    \"issues\": [\n      \"Missing citation for revenue growth claim in Executive Summary\"\n    ],\n    \"warnings\": [\n      \"Industry comparison data is from 2024, more recent data may be available\"\n    ]\n  },\n  \"citation_results\": {\n    \"citation_quality\": \"fair\",\n    \"uncited_claims_count\": 3,\n    \"incorrect_claims_count\": 1,\n    \"details\": {\n      \"properly_cited_claims\": [...],\n      \"uncited_claims\": [...],\n      \"incorrect_claims\": [...],\n      \"recommendations\": [...]\n    }\n  },\n  \"improved_report\": \"# Financial Analysis: Apple Inc. (AAPL)\\n\\n**Date:** March 10, 2025\\n\\n## Executive Summary\\n\\n...[improved report with citations]...\"\n}\n</code></pre>"},{"location":"agents/fact_check_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/fact_check_agent/#validate_financial_datafinancial_data-analysis_results","title":"<code>validate_financial_data(financial_data, analysis_results)</code>","text":"<p>Validates the accuracy of the financial data and analysis:</p> <ol> <li>Checks for missing required financial data sections</li> <li>Verifies that the analysis structure is valid and complete</li> <li>Conducts basic accounting validation (e.g., revenue should exceed net income)</li> <li>Identifies potential inconsistencies or errors in the data</li> <li>Returns a validation result with any issues or warnings found</li> </ol>"},{"location":"agents/fact_check_agent/#check_citationsreport_content-financial_data-research_data","title":"<code>check_citations(report_content, financial_data, research_data)</code>","text":"<p>Analyzes the report for proper citation of factual claims:</p> <ol> <li>Identifies numerical claims and factual statements in the report</li> <li>Determines whether each claim is properly cited or referenced</li> <li>Verifies that cited claims match the underlying financial data</li> <li>Identifies important financial figures that lack citations</li> <li>Returns a comprehensive citation analysis with recommendations</li> </ol>"},{"location":"agents/fact_check_agent/#add_citationsreport_content-financial_data_sources","title":"<code>add_citations(report_content, financial_data_sources)</code>","text":"<p>Improves the report by adding proper citations:</p> <ol> <li>Adds superscript citation references to factual claims</li> <li>Maintains the original formatting and structure of the report</li> <li>Adds a \"Sources\" or \"References\" section listing all citations</li> <li>Returns the enhanced report with proper citations</li> </ol>"},{"location":"agents/fact_check_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts the report, financial data, analysis results, and research results</li> <li>Validates the financial data and analysis</li> <li>Checks citations in the report</li> <li>Adds or improves citations if needed</li> <li>Returns validation results and the improved report</li> </ol>"},{"location":"agents/fact_check_agent/#validation-types","title":"Validation Types","text":"<p>The Fact Check Agent performs several types of validation:</p>"},{"location":"agents/fact_check_agent/#1-data-completeness","title":"1. Data Completeness","text":"<p>Ensures that all required financial data is present: - Income statement, balance sheet, and cash flow statements - Stock price data - Company profile information</p>"},{"location":"agents/fact_check_agent/#2-data-consistency","title":"2. Data Consistency","text":"<p>Checks for logical consistency in financial data: - Revenue should be greater than or equal to net income - Assets should equal liabilities plus equity - Operating cash flow should be consistent with reported income</p>"},{"location":"agents/fact_check_agent/#3-citation-validation","title":"3. Citation Validation","text":"<p>Evaluates the proper attribution of facts and figures: - Numerical claims should have sources - Important financial metrics should be cited - Cited figures should match source data</p>"},{"location":"agents/fact_check_agent/#4-logical-coherence","title":"4. Logical Coherence","text":"<p>Ensures that conclusions drawn in the report are supported by the data presented.</p>"},{"location":"agents/fact_check_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.fact_check_agent import FactCheckAgent\n\n# Initialize the agent\nfact_checker = FactCheckAgent()\n\n# Create input data\ninput_data = {\n    \"report\": draft_report,\n    \"financial_data\": financial_data,\n    \"analysis_results\": analysis_results,\n    \"research_results\": research_results\n}\n\n# Fact check the report\nfact_check_results = fact_checker.process(input_data)\n\n# Access validation results\nvalidation = fact_check_results[\"validation_results\"]\nif validation[\"is_valid\"]:\n    print(\"Report passed validation with\", len(validation[\"warnings\"]), \"warnings\")\nelse:\n    print(\"Report failed validation with\", len(validation[\"issues\"]), \"issues\")\n\n# Get the improved report\nimproved_report = fact_check_results[\"improved_report\"]\n\n# Save the improved report\nwith open(\"final_report.md\", \"w\") as f:\n    f.write(improved_report)\n</code></pre> <p>The Fact Check Agent is the final quality control step in the report generation process, ensuring that the financial analysis reports produced by the system maintain a high standard of accuracy and proper attribution.</p>"},{"location":"agents/overview/","title":"Agents Overview","text":""},{"location":"agents/overview/#agent-system-architecture","title":"Agent System Architecture","text":"<p>The Financial Analysis Agent System uses a role-based approach where each agent specializes in specific tasks:</p>"},{"location":"agents/overview/#base-agent","title":"Base Agent","text":"<p>All agents inherit from the BaseAgent class, which provides: - OpenAI integration - Conversation memory management - Error handling - Common utilities</p>"},{"location":"agents/overview/#specialized-agents","title":"Specialized Agents","text":"<ol> <li>Planner Agent</li> <li>Research planning</li> <li>Task organization</li> <li> <p>Strategy development</p> </li> <li> <p>Data Collection Agent</p> </li> <li>Financial data gathering</li> <li>API interactions</li> <li> <p>Data validation</p> </li> <li> <p>Research Agent</p> </li> <li>Web research</li> <li>News analysis</li> <li> <p>Competitor analysis</p> </li> <li> <p>Analysis Agent</p> </li> <li>Financial analysis</li> <li>Data interpretation</li> <li> <p>Insight generation</p> </li> <li> <p>Writer Agent</p> </li> <li>Report generation</li> <li>Content structuring</li> <li> <p>Data visualization</p> </li> <li> <p>Fact Check Agent</p> </li> <li>Data validation</li> <li>Citation checking</li> <li>Quality assurance</li> </ol>"},{"location":"agents/overview/#agent-communication","title":"Agent Communication","text":"<p>Agents communicate through structured data formats: - JSON for data exchange - Markdown for report content - Standardized error formats</p>"},{"location":"agents/overview/#adding-new-agents","title":"Adding New Agents","text":"<p>To create a new agent:</p> <ol> <li>Inherit from BaseAgent</li> <li>Implement required methods</li> <li>Add to orchestrator</li> <li>Update configuration</li> </ol>"},{"location":"agents/planner_agent/","title":"Planner Agent","text":"<p>The Planner Agent is responsible for creating detailed research and analysis plans tailored to specific companies. It acts as the initial strategist in the workflow, determining what data needs to be collected and what analyses should be performed.</p>"},{"location":"agents/planner_agent/#functionality","title":"Functionality","text":"<p>The Planner Agent:</p> <ol> <li>Receives a company ticker symbol and basic company information</li> <li>Creates a comprehensive research plan tailored to the company and its industry</li> <li>Returns a structured plan that guides the rest of the analysis process</li> </ol>"},{"location":"agents/planner_agent/#implementation","title":"Implementation","text":"<p>The Planner Agent is implemented in the <code>PlannerAgent</code> class:</p> <pre><code>class PlannerAgent(BaseAgent):\n    \"\"\"Agent responsible for creating research and analysis plans.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a financial planning specialist that creates detailed research and analysis plans\"\n        super().__init__(role, \"Planning Specialist\", base_url=base_url, model_name=model_name)\n\n    def create_research_plan(self, ticker: str, company_info: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Create a research plan for a given company.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data to create a research plan.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/planner_agent/#input","title":"Input","text":"<p>The Planner Agent takes a JSON object containing:</p> <pre><code>{\n  \"ticker\": \"AAPL\",\n  \"company_info\": {\n    \"companyName\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\",\n    \"description\": \"Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide.\"\n  }\n}\n</code></pre>"},{"location":"agents/planner_agent/#output","title":"Output","text":"<p>The Planner Agent produces a research plan in JSON format:</p> <pre><code>{\n  \"financial_analysis\": {\n    \"income_statement\": {\n      \"focus_areas\": [\"Revenue growth\", \"Operating margins\", \"R&amp;D expenses\"],\n      \"periods\": \"5-year historical\",\n      \"importance\": \"high\"\n    },\n    \"balance_sheet\": {\n      \"focus_areas\": [\"Cash reserves\", \"Debt levels\", \"Asset growth\"],\n      \"periods\": \"5-year historical\",\n      \"importance\": \"medium\"\n    },\n    \"cash_flow\": {\n      \"focus_areas\": [\"Free cash flow\", \"Capital expenditure\", \"Share repurchases\"],\n      \"periods\": \"5-year historical\",\n      \"importance\": \"high\"\n    }\n  },\n  \"technical_analysis\": {\n    \"indicators\": [\"SMA\", \"EMA\", \"RSI\", \"MACD\"],\n    \"time_periods\": [\"50-day\", \"200-day\"],\n    \"importance\": \"medium\"\n  },\n  \"industry_research\": {\n    \"key_competitors\": [\"Samsung\", \"Xiaomi\", \"Google\"],\n    \"market_trends\": [\"Smartphone market saturation\", \"Services growth\"],\n    \"importance\": \"high\"\n  },\n  \"report_structure\": {\n    \"sections\": [\n      \"executive_summary\",\n      \"company_overview\",\n      \"industry_analysis\",\n      \"financial_analysis\",\n      \"technical_analysis\",\n      \"risk_assessment\",\n      \"investment_recommendation\",\n      \"appendix\"\n    ]\n  }\n}\n</code></pre>"},{"location":"agents/planner_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/planner_agent/#create_research_planticker-company_info","title":"<code>create_research_plan(ticker, company_info)</code>","text":"<p>Creates a tailored research plan for a specific company by:</p> <ol> <li>Analyzing the company's sector and industry</li> <li>Determining which financial metrics are most relevant</li> <li>Identifying what technical indicators to use</li> <li>Planning what industry research is needed</li> <li>Outlining the structure of the final report</li> </ol>"},{"location":"agents/planner_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts the ticker symbol and company information</li> <li>Calls <code>create_research_plan</code> to generate the plan</li> <li>Returns the structured plan</li> </ol>"},{"location":"agents/planner_agent/#customization","title":"Customization","text":"<p>To customize the Planner Agent for specific industries:</p> <ol> <li>Modify the prompt template in <code>create_research_plan</code> to include industry-specific guidance</li> <li>Add logic to prioritize different metrics based on industry classification</li> <li>Include additional specialized sections for certain sectors (e.g., regulatory analysis for financial or healthcare companies)</li> </ol>"},{"location":"agents/planner_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.planner_agent import PlannerAgent\n\n# Initialize the agent\nplanner = PlannerAgent()\n\n# Create input data\ninput_data = {\n    \"ticker\": \"AAPL\",\n    \"company_info\": {\n        \"companyName\": \"Apple Inc.\",\n        \"sector\": \"Technology\",\n        \"industry\": \"Consumer Electronics\"\n    }\n}\n\n# Generate a research plan\nresearch_plan = planner.process(input_data)\n\n# Use the research plan for subsequent analysis\nprint(research_plan)\n</code></pre>"},{"location":"agents/research_agent/","title":"Research Agent","text":"<p>The Research Agent is responsible for conducting web research to gather information about companies, industries, and market trends. It uses search APIs to find and analyze relevant news, articles, and data.</p>"},{"location":"agents/research_agent/#functionality","title":"Functionality","text":"<p>The Research Agent:</p> <ol> <li>Receives a company ticker, profile information, and research plan</li> <li>Performs targeted web searches for company news, industry trends, and competitor information</li> <li>Analyzes and summarizes the research findings</li> <li>Returns structured research results</li> </ol>"},{"location":"agents/research_agent/#implementation","title":"Implementation","text":"<p>The Research Agent is implemented in the <code>ResearchAgent</code> class:</p> <pre><code>class ResearchAgent(BaseAgent):\n    \"\"\"Agent responsible for conducting web research and finding relevant information.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a financial research specialist that gathers relevant market news and industry information\"\n        super().__init__(role, \"Research Specialist\", base_url=base_url, model_name=model_name)\n        self.research_tool = WebResearchTool()\n\n    def web_search(self, query: str, num_results: int = MAX_SEARCH_RESULTS) -&gt; List[Dict[str, Any]]:\n        \"\"\"Perform a web search using the web research tool.\"\"\"\n        # Implementation details...\n\n    def research_company_news(self, ticker: str, company_name: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"Research recent news about a company.\"\"\"\n        # Implementation details...\n\n    def research_industry_trends(self, industry: str, sector: str) -&gt; Dict[str, Any]:\n        \"\"\"Research industry trends.\"\"\"\n        # Implementation details...\n\n    def research_competitors(self, ticker: str, company_name: str, industry: str) -&gt; Dict[str, Any]:\n        \"\"\"Research company competitors.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process the research request for a company.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/research_agent/#input","title":"Input","text":"<p>The Research Agent takes a JSON object containing:</p> <pre><code>{\n  \"ticker\": \"AAPL\",\n  \"company_profile\": [{\n    \"companyName\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\"\n  }],\n  \"research_plan\": {\n    \"industry_research\": {\n      \"key_competitors\": [\"Samsung\", \"Xiaomi\", \"Google\"],\n      \"market_trends\": [\"Smartphone market saturation\", \"Services growth\"]\n    }\n  }\n}\n</code></pre>"},{"location":"agents/research_agent/#output","title":"Output","text":"<p>The Research Agent produces structured research results:</p> <pre><code>{\n  \"company_news\": [\n    {\n      \"title\": \"Apple Unveils New AI Features for iPhone\",\n      \"source\": \"TechCrunch\",\n      \"url\": \"https://techcrunch.com/apple-ai-features\",\n      \"date\": \"2023-12-10\",\n      \"summary\": \"Apple announced new AI capabilities coming to iPhones next year, including improved Siri and on-device processing.\",\n      \"impact\": \"Medium\"\n    }\n  ],\n  \"industry_trends\": {\n    \"key_trends\": [\n      {\n        \"trend\": \"AI Integration in Consumer Electronics\",\n        \"description\": \"Companies are increasingly integrating AI capabilities into consumer electronics.\",\n        \"impact\": \"Major shift in product development strategies.\"\n      }\n    ],\n    \"growth_prospects\": {\n      \"short_term\": \"Moderate growth expected due to economic uncertainties.\",\n      \"long_term\": \"Strong growth projected driven by AI, AR, and new form factors.\"\n    },\n    \"challenges\": [\n      \"Supply chain constraints\",\n      \"Increasing component costs\",\n      \"Regulatory scrutiny\"\n    ]\n  },\n  \"competitor_analysis\": {\n    \"competitors\": [\n      {\n        \"name\": \"Samsung Electronics\",\n        \"ticker\": \"005930.KS\",\n        \"market_share\": \"19%\",\n        \"strengths\": [\"Vertical integration\", \"Display technology leadership\"],\n        \"weaknesses\": [\"Software ecosystem fragmentation\", \"Lower brand premium\"]\n      }\n    ],\n    \"competitive_analysis\": {\n      \"apple_advantages\": [\"Ecosystem lock-in\", \"Brand premium\", \"Service revenue growth\"],\n      \"apple_disadvantages\": [\"Higher price points\", \"Limited market share in emerging markets\"]\n    }\n  }\n}\n</code></pre>"},{"location":"agents/research_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/research_agent/#web_searchquery-num_results","title":"<code>web_search(query, num_results)</code>","text":"<p>Performs a general web search using the WebResearchTool:</p> <ol> <li>Sends a search query to the search API</li> <li>Processes and formats the search results</li> <li>Returns a list of relevant search results</li> </ol>"},{"location":"agents/research_agent/#research_company_newsticker-company_name","title":"<code>research_company_news(ticker, company_name)</code>","text":"<p>Researches recent news about a company:</p> <ol> <li>Constructs a search query combining company name and ticker</li> <li>Uses news-specific search if available</li> <li>Uses LLM to analyze, summarize, and rate the news items</li> <li>Returns a list of relevant and impactful news items</li> </ol>"},{"location":"agents/research_agent/#research_industry_trendsindustry-sector","title":"<code>research_industry_trends(industry, sector)</code>","text":"<p>Researches trends in an industry or sector:</p> <ol> <li>Constructs a search query focused on industry trends</li> <li>Uses LLM to analyze search results and extract key trends</li> <li>Structures the information into a comprehensive industry analysis</li> <li>Returns insights about growth prospects, challenges, and competitive landscape</li> </ol>"},{"location":"agents/research_agent/#research_competitorsticker-company_name-industry","title":"<code>research_competitors(ticker, company_name, industry)</code>","text":"<p>Researches a company's competitors:</p> <ol> <li>Constructs a search query focused on competitors</li> <li>Uses LLM to identify and analyze main competitors</li> <li>Compares relative market positions and competitive advantages</li> <li>Returns structured competitor analysis</li> </ol>"},{"location":"agents/research_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts company information from the input</li> <li>Conducts research on company news, industry trends, and competitors</li> <li>Combines all research results into a structured output</li> </ol>"},{"location":"agents/research_agent/#search-api-integration","title":"Search API Integration","text":"<p>The Research Agent uses the WebResearchTool, which integrates with search APIs like SerpAPI to perform web searches. Alternative search providers can be implemented by modifying the WebResearchTool.</p>"},{"location":"agents/research_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.research_agent import ResearchAgent\n\n# Initialize the agent\nresearcher = ResearchAgent()\n\n# Create input data\ninput_data = {\n    \"ticker\": \"AAPL\",\n    \"company_profile\": [{\n        \"companyName\": \"Apple Inc.\",\n        \"sector\": \"Technology\",\n        \"industry\": \"Consumer Electronics\"\n    }],\n    \"research_plan\": {\n        \"industry_research\": {\n            \"key_competitors\": [\"Samsung\", \"Xiaomi\"]\n        }\n    }\n}\n\n# Conduct research\nresearch_results = researcher.process(input_data)\n\n# Access specific research findings\nnews = research_results.get(\"company_news\", [])\ntrends = research_results.get(\"industry_trends\", {})\ncompetitors = research_results.get(\"competitor_analysis\", {})\n\nprint(f\"Found {len(news)} relevant news items\")\nprint(f\"Key industry trend: {trends.get('key_trends', [{}])[0].get('trend', '')}\")\n</code></pre>"},{"location":"agents/writer_agent/","title":"Writer Agent","text":"<p>The Writer Agent is responsible for transforming analysis results into a well-structured, professional financial report. This agent takes complex financial data and insights and presents them in a clear, readable format suitable for various audiences.</p>"},{"location":"agents/writer_agent/#functionality","title":"Functionality","text":"<p>The Writer Agent:</p> <ol> <li>Receives analysis results and company information</li> <li>Generates a detailed report structure based on the research plan</li> <li>Writes individual sections with appropriate content and formatting</li> <li>Combines sections into a cohesive, professional report</li> <li>Returns the complete report in Markdown format</li> </ol>"},{"location":"agents/writer_agent/#implementation","title":"Implementation","text":"<p>The Writer Agent is implemented in the <code>WriterAgent</code> class:</p> <pre><code>class WriterAgent(BaseAgent):\n    \"\"\"Agent responsible for writing financial research reports.\"\"\"\n\n    def __init__(self, base_url: str = None, model_name: str = None):\n        role = \"a professional financial writer that creates clear, insightful financial research reports\"\n        super().__init__(role, \"Financial Writer\", base_url=base_url, model_name=model_name)\n\n    def generate_report_structure(self, ticker: str, company_info: Dict[str, Any], research_plan: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Generate the structure of the financial research report.\"\"\"\n        # Implementation details...\n\n    def write_report_section(self, section_name: str, section_template: Dict[str, Any], analysis_data: Dict[str, Any]) -&gt; str:\n        \"\"\"Write a specific section of the report.\"\"\"\n        # Implementation details...\n\n    def compile_full_report(self, report_template: Dict[str, Any], section_contents: Dict[str, str]) -&gt; str:\n        \"\"\"Compile all sections into a complete report.\"\"\"\n        # Implementation details...\n\n    def process(self, input_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Process input data to create a financial research report.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"agents/writer_agent/#input","title":"Input","text":"<p>The Writer Agent takes a JSON object containing:</p> <pre><code>{\n  \"ticker\": \"AAPL\",\n  \"company_profile\": [{\n    \"companyName\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\",\n    \"description\": \"Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide.\"\n  }],\n  \"research_plan\": {\n    \"report_structure\": {\n      \"sections\": [\n        \"executive_summary\",\n        \"company_overview\",\n        \"industry_analysis\",\n        \"financial_analysis\",\n        \"technical_analysis\",\n        \"risk_assessment\",\n        \"investment_recommendation\",\n        \"appendix\"\n      ]\n    }\n  },\n  \"analysis_results\": {\n    \"financial_analysis\": {\n      \"quantitative_analysis\": {...},\n      \"qualitative_analysis\": {...}\n    },\n    \"market_research\": {...},\n    \"integrated_insights\": {...}\n  }\n}\n</code></pre>"},{"location":"agents/writer_agent/#output","title":"Output","text":"<p>The Writer Agent produces a structured output containing:</p> <pre><code>{\n  \"report\": \"# Financial Analysis: Apple Inc. (AAPL)\\n\\n**Date:** March 10, 2025\\n\\n## Executive Summary\\n\\n...[full markdown report content]...\",\n  \"sections\": {\n    \"executive_summary\": \"Apple Inc. continues to maintain its position as a leader...\",\n    \"financial_analysis\": \"## Financial Analysis\\n\\nApple reported total revenue of...\",\n    \"...\": \"...\"\n  },\n  \"structure\": {\n    \"title\": \"Financial Analysis: Apple Inc. (AAPL)\",\n    \"date\": \"March 10, 2025\",\n    \"structure\": {\n      \"executive_summary\": {\n        \"title\": \"Executive Summary\",\n        \"key_points\": [\"Overview of findings\", \"Key investment highlights\"]\n      },\n      \"...\": \"...\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/writer_agent/#key-methods","title":"Key Methods","text":""},{"location":"agents/writer_agent/#generate_report_structureticker-company_info-research_plan","title":"<code>generate_report_structure(ticker, company_info, research_plan)</code>","text":"<p>Creates a detailed structure for the report:</p> <ol> <li>Uses the research plan to determine the appropriate sections</li> <li>Gets LLM guidance for what should be included in each section</li> <li>Structures the report with appropriate titles, key points, and subsections</li> <li>Returns a complete report template that guides the writing process</li> </ol>"},{"location":"agents/writer_agent/#write_report_sectionsection_name-section_template-analysis_data","title":"<code>write_report_section(section_name, section_template, analysis_data)</code>","text":"<p>Writes individual report sections:</p> <ol> <li>Identifies the relevant data needed for the section</li> <li>Uses LLM to write professional, analytical content for the section</li> <li>Formats the content appropriately with Markdown</li> <li>Returns the completed section content</li> </ol>"},{"location":"agents/writer_agent/#compile_full_reportreport_template-section_contents","title":"<code>compile_full_report(report_template, section_contents)</code>","text":"<p>Combines individual sections into a cohesive report:</p> <ol> <li>Creates a title and date header</li> <li>Builds a table of contents with links</li> <li>Combines all section contents in the appropriate order</li> <li>Adds proper formatting and separators between sections</li> <li>Includes a disclaimer at the end</li> <li>Returns the complete Markdown report</li> </ol>"},{"location":"agents/writer_agent/#processinput_data","title":"<code>process(input_data)</code>","text":"<p>The main entry point that:</p> <ol> <li>Validates the input data</li> <li>Extracts the ticker, company profile, research plan, and analysis results</li> <li>Generates the report structure</li> <li>Writes each section of the report</li> <li>Compiles the full report</li> <li>Returns the complete report along with section contents and structure</li> </ol>"},{"location":"agents/writer_agent/#report-formatting","title":"Report Formatting","text":"<p>The Writer Agent uses Markdown formatting for the report, which offers several advantages:</p> <ol> <li>Readability: Clean, structured format that's easy to read in raw form</li> <li>Convertibility: Can be easily converted to HTML, PDF, or other formats</li> <li>Version Control: Text-based format works well with version control systems</li> <li>Embeddable: Code blocks, tables, and charts can be embedded seamlessly</li> </ol> <p>A typical report structure includes:</p> <ul> <li>Title and Date: Report title with company name and ticker</li> <li>Table of Contents: Links to each major section</li> <li>Executive Summary: Overview of key findings and recommendations</li> <li>Analytical Sections: Detailed analysis of different aspects</li> <li>Recommendation: Clear investment guidance with rationale</li> <li>Appendix/References: Supporting information and data sources</li> </ul>"},{"location":"agents/writer_agent/#example-usage","title":"Example Usage","text":"<pre><code>from agents.writer_agent import WriterAgent\n\n# Initialize the agent\nwriter = WriterAgent()\n\n# Create input data\ninput_data = {\n    \"ticker\": \"AAPL\",\n    \"company_profile\": [{\n        \"companyName\": \"Apple Inc.\",\n        \"sector\": \"Technology\"\n    }],\n    \"research_plan\": research_plan,\n    \"analysis_results\": analysis_results\n}\n\n# Generate the report\nreport_results = writer.process(input_data)\n\n# Access the complete report\nreport_markdown = report_results[\"report\"]\n\n# Save to file\nwith open(\"apple_analysis_report.md\", \"w\") as f:\n    f.write(report_markdown)\n</code></pre> <p>The Writer Agent specializes in transforming complex financial analysis into clear, actionable reports that maintain professional standards while being accessible to the intended audience.</p>"},{"location":"api/agents/","title":"Agents API Reference","text":""},{"location":"api/agents/#baseagent","title":"BaseAgent","text":"<p>The base class for all specialized agents.</p> <pre><code>from agents.base_agent import BaseAgent\n\nclass BaseAgent:\n    def __init__(self, role: str, agent_name: str)\n    def _call_llm(self, prompt: str, temperature: Optional[float] = None) -&gt; str\n    def process(self, input_data: Any) -&gt; Any\n    def reset_memory(self)\n</code></pre>"},{"location":"api/agents/#planneragent","title":"PlannerAgent","text":"<pre><code>from agents.planner_agent import PlannerAgent\n\nagent = PlannerAgent()\nplan = agent.process({\n    \"ticker\": \"AAPL\",\n    \"company_info\": {...}\n})\n</code></pre>"},{"location":"api/agents/#datacollectionagent","title":"DataCollectionAgent","text":"<pre><code>from agents.data_collection_agent import DataCollectionAgent\n\nagent = DataCollectionAgent()\ndata = agent.process({\n    \"ticker\": \"AAPL\",\n    \"research_plan\": {...}\n})\n</code></pre> <p>View full agents documentation \u2192</p>"},{"location":"api/tools/","title":"Tools API Reference","text":""},{"location":"api/tools/#chartgenerator","title":"ChartGenerator","text":"<pre><code>from tools.chart_generator import ChartGenerator\n\ngenerator = ChartGenerator(output_dir='reports')\nchart_path = generator.create_candlestick_chart(\n    price_data=data,\n    ticker=\"AAPL\",\n    title=\"Apple Stock Price\"\n)\n</code></pre>"},{"location":"api/tools/#datatransformer","title":"DataTransformer","text":"<pre><code>from tools.data_transformer import DataTransformer\n\ntransformer = DataTransformer()\nclean_data = transformer.clean_financial_data(raw_data)\nmetrics = transformer.normalize_metrics(clean_data, ['revenue', 'netIncome'])\ntrends = transformer.extract_quarterly_trends(clean_data, ['revenue'])\n</code></pre>"},{"location":"api/tools/#webresearchtool","title":"WebResearchTool","text":"<pre><code>from tools.web_research import WebResearchTool\n\nresearch = WebResearchTool()\nresults = research.search_google(\"AAPL earnings report 2024\")\nnews = research.search_news(\"Apple stock analysis\")\n</code></pre> <p>View full tools documentation \u2192</p>"},{"location":"architecture/agents/planner/","title":"Planner Agent","text":"<p>The Planner Agent is responsible for creating comprehensive research plans and structuring the analysis approach.</p>"},{"location":"architecture/agents/planner/#responsibilities","title":"Responsibilities","text":"<ul> <li>Creating detailed research plans</li> <li>Identifying key financial metrics to analyze</li> <li>Determining technical indicators to track</li> <li>Planning competitive analysis scope</li> <li>Structuring the final report format</li> </ul>"},{"location":"architecture/agents/planner/#implementation","title":"Implementation","text":"<pre><code>from agents.base_agent import BaseAgent\n\nclass PlannerAgent(BaseAgent):\n    def __init__(self):\n        role = \"a strategic financial research planner\"\n        super().__init__(role, \"Research Planner\")\n</code></pre>"},{"location":"architecture/agents/planner/#key-methods","title":"Key Methods","text":""},{"location":"architecture/agents/planner/#create_research_plan","title":"create_research_plan","text":"<p>Creates a structured research plan based on company information: - Financial analysis requirements - Technical analysis scope - Industry research needs - Recent developments to track - Report structure</p>"},{"location":"architecture/agents/planner/#process","title":"process","text":"<p>Main entry point that processes input data and creates the research plan.</p>"},{"location":"architecture/agents/planner/#example-usage","title":"Example Usage","text":"<pre><code>planner = PlannerAgent()\nresearch_plan = planner.process({\n    \"ticker\": \"AAPL\",\n    \"company_info\": company_info\n})\n</code></pre>"},{"location":"components/agent-system/","title":"Agent System Architecture","text":""},{"location":"components/agent-system/#overview","title":"Overview","text":"<p>The Financial Analysis Agent System uses a role-based architecture with specialized agents working together to perform comprehensive financial analysis. Each agent has specific responsibilities and expertise.</p>"},{"location":"components/agent-system/#core-agents","title":"Core Agents","text":""},{"location":"components/agent-system/#planner-agent","title":"Planner Agent","text":"<ul> <li>Creates comprehensive research plans</li> <li>Determines analysis requirements</li> <li>Structures the research approach</li> </ul>"},{"location":"components/agent-system/#data-collection-agent","title":"Data Collection Agent","text":"<ul> <li>Gathers financial data from APIs</li> <li>Collects historical market data</li> <li>Retrieves company information</li> </ul>"},{"location":"components/agent-system/#research-agent","title":"Research Agent","text":"<ul> <li>Conducts web research</li> <li>Analyzes news and market sentiment</li> <li>Researches industry trends</li> </ul>"},{"location":"components/agent-system/#analysis-agent","title":"Analysis Agent","text":"<ul> <li>Performs financial analysis</li> <li>Generates insights from data</li> <li>Integrates various data sources</li> </ul>"},{"location":"components/agent-system/#writer-agent","title":"Writer Agent","text":"<ul> <li>Creates structured reports</li> <li>Formats analysis results</li> <li>Ensures clear communication</li> </ul>"},{"location":"components/agent-system/#fact-check-agent","title":"Fact Check Agent","text":"<ul> <li>Validates data accuracy</li> <li>Verifies citations</li> <li>Ensures report quality</li> </ul>"},{"location":"components/agent-system/#agent-interaction-flow","title":"Agent Interaction Flow","text":"<pre><code>graph TD\n    A[Planner Agent] --&gt; B[Data Collection Agent]\n    A --&gt; C[Research Agent]\n    B --&gt; D[Analysis Agent]\n    C --&gt; D\n    D --&gt; E[Writer Agent]\n    E --&gt; F[Fact Check Agent]\n    F --&gt; E</code></pre>"},{"location":"components/agent-system/#system-benefits","title":"System Benefits","text":"<ol> <li>Specialized Expertise: Each agent focuses on specific tasks</li> <li>Quality Control: Built-in validation and fact-checking</li> <li>Scalability: Easy to add new agents or modify existing ones</li> <li>Maintainability: Modular design for easy updates</li> </ol>"},{"location":"components/data-providers/","title":"Data Providers","text":""},{"location":"components/data-providers/#financial-modeling-prep-api","title":"Financial Modeling Prep API","text":"<p>The system primarily uses Financial Modeling Prep (FMP) API for financial data:</p>"},{"location":"components/data-providers/#available-data","title":"Available Data","text":"<ul> <li>Income Statements</li> <li>Balance Sheets</li> <li>Cash Flow Statements</li> <li>Company Profiles</li> <li>Stock Prices</li> <li>Technical Indicators</li> <li>Financial Ratios</li> <li>Analyst Estimates</li> </ul>"},{"location":"components/data-providers/#configuration","title":"Configuration","text":"<pre><code>FMP_API_KEY = os.getenv(\"FMP_API_KEY\")\nFMP_BASE_URL = \"https://financialmodelingprep.com/api/v3\"\n</code></pre>"},{"location":"components/data-providers/#google-search-api-via-serper","title":"Google Search API (via Serper)","text":"<p>Used for web research and news gathering:</p>"},{"location":"components/data-providers/#features","title":"Features","text":"<ul> <li>Web Search</li> <li>News Search</li> <li>Content Filtering</li> <li>Result Processing</li> </ul>"},{"location":"components/data-providers/#configuration_1","title":"Configuration","text":"<pre><code>SERPER_API_KEY = os.getenv(\"SERPER_API_KEY\")\nMAX_SEARCH_RESULTS = 5\n</code></pre>"},{"location":"components/data-providers/#adding-new-data-providers","title":"Adding New Data Providers","text":"<p>To add a new data provider:</p> <ol> <li>Create a new provider class in <code>tools/</code></li> <li>Implement required methods</li> <li>Update configuration</li> <li>Integrate with Data Collection Agent</li> </ol>"},{"location":"components/tools/","title":"Tools Overview","text":""},{"location":"components/tools/#core-tools","title":"Core Tools","text":"<p>The system includes several specialized tools for data handling and visualization:</p>"},{"location":"components/tools/#chart-generator","title":"Chart Generator","text":"<ul> <li>Interactive candlestick charts</li> <li>Technical indicators</li> <li>Volume analysis</li> <li>Custom timeframes</li> </ul>"},{"location":"components/tools/#data-transformer","title":"Data Transformer","text":"<ul> <li>Data cleaning and standardization</li> <li>Metric normalization</li> <li>Growth rate calculations</li> <li>Trend analysis</li> </ul>"},{"location":"components/tools/#financial-data-provider","title":"Financial Data Provider","text":"<ul> <li>API integration</li> <li>Data retrieval</li> <li>Error handling</li> <li>Rate limiting</li> </ul>"},{"location":"components/tools/#report-builder","title":"Report Builder","text":"<ul> <li>Report formatting</li> <li>Chart integration</li> <li>Dynamic content generation</li> <li>Template management</li> </ul>"},{"location":"components/tools/#web-research-tool","title":"Web Research Tool","text":"<ul> <li>Web searching</li> <li>News aggregation</li> <li>Content filtering</li> <li>Data extraction</li> </ul>"},{"location":"components/tools/#usage-examples","title":"Usage Examples","text":""},{"location":"components/tools/#interactive-charts","title":"Interactive Charts","text":"<pre><code>from tools.chart_generator import ChartGenerator\n\nchart_gen = ChartGenerator()\nchart_path = chart_gen.create_candlestick_chart(price_data, \"AAPL\")\n</code></pre>"},{"location":"components/tools/#data-processing","title":"Data Processing","text":"<pre><code>from tools.data_transformer import DataTransformer\n\ntransformer = DataTransformer()\nclean_data = transformer.clean_financial_data(raw_data)\ntrends = transformer.extract_quarterly_trends(clean_data)\n</code></pre>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":""},{"location":"examples/basic-usage/#simple-analysis","title":"Simple Analysis","text":"<p>The simplest way to analyze a company is using the command line:</p> <pre><code>python main.py --ticker AAPL\n</code></pre>"},{"location":"examples/basic-usage/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>from orchestrator import FinancialAnalysisOrchestrator\n\n# Initialize the orchestrator\norchestrator = FinancialAnalysisOrchestrator()\n\n# Analyze a company\nresults = orchestrator.analyze_company(\"AAPL\")\n\n# Access various components of the results\nprint(f\"Report saved to: {results['report_path']}\")\nprint(f\"Analysis time: {results['execution_time']:.2f} seconds\")\n\n# Access financial data\nfinancial_data = results['financial_data']\nanalysis = results['analysis_results']\nresearch = results['research_results']\n</code></pre>"},{"location":"examples/basic-usage/#custom-analysis","title":"Custom Analysis","text":"<p>You can also use individual components:</p> <pre><code>from agents import PlannerAgent, DataCollectionAgent, AnalysisAgent\nfrom tools import ChartGenerator\n\n# Create agents\nplanner = PlannerAgent()\ncollector = DataCollectionAgent()\nanalyst = AnalysisAgent()\n\n# Create a research plan\nplan = planner.process({\"ticker\": \"AAPL\"})\n\n# Collect data\ndata = collector.process({\n    \"ticker\": \"AAPL\",\n    \"research_plan\": plan\n})\n\n# Analyze data\nanalysis = analyst.process({\n    \"financial_data\": data,\n    \"research_plan\": plan\n})\n\n# Generate charts\nchart_gen = ChartGenerator()\nchart_path = chart_gen.create_candlestick_chart(\n    data[\"stock_price\"],\n    \"AAPL\"\n)\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":""},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The system uses several environment variables for configuration. These should be set in your <code>.env</code> file:</p> <pre><code># API Keys\nOPENAI_API_KEY=your_openai_api_key_here\nFMP_API_KEY=your_financial_modeling_prep_api_key_here\nSERPER_API_KEY=your_serper_api_key_here\n\n# OpenAI Configuration\nOPENAI_MODEL=gpt-4-turbo\nOPENAI_TEMPERATURE=0.2\nOPENAI_MAX_TOKENS=1500\n\n# Analysis Parameters\nDEFAULT_PERIOD=quarter\nDEFAULT_LIMIT=4\n</code></pre>"},{"location":"getting-started/configuration/#analysis-parameters","title":"Analysis Parameters","text":"<p>You can customize various analysis parameters in <code>config.py</code>:</p>"},{"location":"getting-started/configuration/#openai-settings","title":"OpenAI Settings","text":"<ul> <li><code>OPENAI_MODEL</code>: The OpenAI model to use</li> <li><code>OPENAI_TEMPERATURE</code>: Controls randomness in responses (0.0-1.0)</li> <li><code>OPENAI_MAX_TOKENS</code>: Maximum tokens per response</li> </ul>"},{"location":"getting-started/configuration/#data-collection","title":"Data Collection","text":"<ul> <li><code>DEFAULT_PERIOD</code>: Default period for financial statements (\"quarter\" or \"annual\")</li> <li><code>DEFAULT_LIMIT</code>: Number of periods to fetch</li> <li><code>TECHNICAL_INDICATORS</code>: List of technical indicators to calculate</li> </ul>"},{"location":"getting-started/configuration/#research-settings","title":"Research Settings","text":"<ul> <li><code>MAX_SEARCH_RESULTS</code>: Maximum number of web search results</li> <li><code>MAX_RESEARCH_DEPTH</code>: Depth of research analysis</li> </ul>"},{"location":"getting-started/configuration/#output-settings","title":"Output Settings","text":"<ul> <li><code>REPORTS_DIR</code>: Directory for generated reports and charts</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the Financial Analysis Agent System, ensure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>API keys for:</li> <li>Financial Modeling Prep</li> <li>OpenAI</li> <li>Serper (for web research)</li> <li>Pip package manager</li> </ul>"},{"location":"getting-started/installation/#step-by-step-installation","title":"Step-by-Step Installation","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone &lt;repository-url&gt;\ncd financial-analysis-agent\n</code></pre></p> </li> <li> <p>Install required packages: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> file in the project root: <pre><code>OPENAI_API_KEY=your_openai_api_key\nFMP_API_KEY=your_financial_modeling_prep_api_key\nSERPER_API_KEY=your_serper_api_key\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code>python run.py AAPL\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>See the Configuration guide for detailed settings information.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with the Financial Analysis Agent System quickly.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Run a simple analysis: <pre><code>python main.py --ticker AAPL\n</code></pre></p> </li> <li> <p>The system will generate:</p> </li> <li>A comprehensive financial analysis report</li> <li>Interactive stock charts</li> <li>Analysis results in JSON format</li> </ol>"},{"location":"getting-started/quickstart/#example-output","title":"Example Output","text":"<pre><code>from orchestrator import FinancialAnalysisOrchestrator\n\n# Initialize orchestrator\norchestrator = FinancialAnalysisOrchestrator()\n\n# Analyze a company\nresults = orchestrator.analyze_company(\"AAPL\")\n\n# Access results\nprint(f\"Report saved to: {results['report_path']}\")\nprint(f\"Analysis completed in: {results['execution_time']:.2f} seconds\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about advanced configuration options</li> <li>Explore the agent system architecture</li> <li>Check out example analyses</li> </ul>"},{"location":"modules/","title":"Modules Overview","text":"<p>Modules in the Financial Analysis System provide core functionality for data processing and analysis without the LLM-powered reasoning of agents. They serve as the computational backbone of the system, implementing algorithms for financial analysis and data handling.</p>"},{"location":"modules/#key-differences-between-modules-and-agents","title":"Key Differences Between Modules and Agents","text":"Modules Agents Focus on computation and data processing Focus on reasoning and decision-making Do not use LLM capabilities directly Leverage LLMs for complex tasks Deterministic output for a given input May vary in output based on LLM responses Reusable across different workloads Specialized for specific parts of the workflow"},{"location":"modules/#available-modules","title":"Available Modules","text":""},{"location":"modules/#financial-analyzer","title":"Financial Analyzer","text":"<p>The Financial Analyzer module performs quantitative analysis of financial data:</p> <ul> <li>Calculates financial ratios and metrics</li> <li>Analyzes income statements, balance sheets, and cash flows</li> <li>Identifies trends in financial performance</li> <li>Evaluates technical indicators</li> </ul> <p>This module provides pure computational analysis without qualitative interpretation, which is later added by the Analysis Agent.</p>"},{"location":"modules/#data-collector","title":"Data Collector","text":"<p>The Data Collector module interfaces with financial data sources to retrieve raw data:</p> <ul> <li>Fetches financial statements from APIs</li> <li>Retrieves stock price and technical indicator data</li> <li>Collects company profile information</li> <li>Standardizes data formats for further processing</li> </ul> <p>This module abstracts away the complexities of data retrieval, allowing other components to work with clean, standardized data.</p>"},{"location":"modules/#module-architecture","title":"Module Architecture","text":"<p>Modules are implemented as Python classes with a focus on:</p> <ol> <li>Clean interfaces: Well-defined input and output structures</li> <li>Error handling: Robust handling of API failures and data issues</li> <li>Data transformation: Converting between different formats and handling special types</li> <li>Performance optimization: Efficient processing of financial data</li> </ol>"},{"location":"modules/#using-modules-independently","title":"Using Modules Independently","text":"<p>Modules can be used independently of the agent system for focused tasks:</p> <pre><code>from modules.data_collector import FinancialDataCollector\nfrom modules.financial_analyzer import FinancialAnalyzer\n\n# Initialize modules\ncollector = FinancialDataCollector()\nanalyzer = FinancialAnalyzer()\n\n# Collect data\nfinancial_data = collector.get_comprehensive_data(\"AAPL\")\n\n# Analyze data\nanalysis_results = analyzer.comprehensive_analysis(financial_data)\n\n# Use specific analysis functions\nincome_analysis = analyzer.analyze_income_statement(financial_data[\"income_statement\"])\n</code></pre>"},{"location":"modules/#extending-the-module-system","title":"Extending the Module System","text":"<p>To add a new module to the system:</p> <ol> <li>Create a new Python class in the <code>modules</code> directory</li> <li>Implement the necessary functionality with clear method interfaces</li> <li>Add proper error handling and logging</li> <li>Update documentation for the new module</li> <li>Integrate with existing modules or agents as needed</li> </ol>"},{"location":"modules/#best-practices","title":"Best Practices","text":"<p>When working with modules:</p> <ol> <li>Separate concerns: Keep data collection separate from analysis</li> <li>Handle edge cases: Account for missing or incomplete data</li> <li>Document interfaces: Clearly document input and output formats</li> <li>Use type hints: Leverage Python type hints for better code clarity</li> <li>Write unit tests: Test modules independently from agents</li> </ol>"},{"location":"modules/data_collector/","title":"Data Collector Module","text":"<p>The Data Collector module provides functionality for retrieving financial data from various sources, primarily through API calls to financial data providers. It serves as a standardized interface for gathering the raw data needed for analysis.</p>"},{"location":"modules/data_collector/#overview","title":"Overview","text":"<p>The Data Collector simplifies the collection of financial information by providing clean methods to retrieve different types of financial data. It abstracts away the complexities of API calls, error handling, and data format standardization.</p>"},{"location":"modules/data_collector/#implementation","title":"Implementation","text":"<pre><code>class FinancialDataCollector:\n    \"\"\"Module for collecting and organizing financial data.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the financial data collector.\"\"\"\n        self.provider = FinancialDataProvider()\n\n    def get_company_profile(self, ticker: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get company profile information.\"\"\"\n        # Implementation details...\n\n    def get_income_statement(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get income statement data.\"\"\"\n        # Implementation details...\n\n    # ...other methods for different financial data types...\n\n    def get_comprehensive_data(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; Dict[str, Any]:\n        \"\"\"Get comprehensive financial data for a company.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"modules/data_collector/#key-data-collection-methods","title":"Key Data Collection Methods","text":""},{"location":"modules/data_collector/#company-profile","title":"Company Profile","text":"<p>The <code>get_company_profile</code> method retrieves basic information about a company:</p> <ul> <li>Company name, ticker symbol, and description</li> <li>Industry and sector classification</li> <li>Current market capitalization and stock price</li> <li>Beta value and other key identifiers</li> </ul> <p>Example output: <pre><code>[{\n  \"companyName\": \"Apple Inc.\",\n  \"symbol\": \"AAPL\",\n  \"sector\": \"Technology\",\n  \"industry\": \"Consumer Electronics\",\n  \"beta\": 1.28,\n  \"price\": 182.63,\n  \"mktCap\": 2845000000000,\n  \"description\": \"Apple Inc. designs, manufactures, and markets smartphones, personal computers...\"\n}]\n</code></pre></p>"},{"location":"modules/data_collector/#financial-statements","title":"Financial Statements","text":"<p>The module provides methods for retrieving the three main financial statements:</p> <ol> <li>Income Statement (<code>get_income_statement</code>): Revenue, expenses, and profitability</li> <li>Balance Sheet (<code>get_balance_sheet</code>): Assets, liabilities, and equity</li> <li>Cash Flow Statement (<code>get_cash_flow</code>): Operating, investing, and financing cash flows</li> </ol> <p>All statement methods accept parameters for: - <code>period</code>: \"annual\" or \"quarter\" reporting periods - <code>limit</code>: Number of historical periods to retrieve</p>"},{"location":"modules/data_collector/#additional-financial-data","title":"Additional Financial Data","text":"<p>The module also provides methods for retrieving:</p> <ul> <li>Key Metrics (<code>get_key_metrics</code>): Important financial metrics like EPS, ROE, etc.</li> <li>Financial Ratios (<code>get_financial_ratios</code>): Standard financial ratios for analysis</li> <li>Stock Price (<code>get_stock_price</code>): Historical and current stock price data</li> <li>Technical Indicators (<code>get_technical_indicators</code>): Technical analysis indicators</li> <li>Analyst Estimates (<code>get_analyst_estimates</code>): Forward-looking estimates</li> </ul>"},{"location":"modules/data_collector/#comprehensive-data-collection","title":"Comprehensive Data Collection","text":"<p>The <code>get_comprehensive_data</code> method provides a convenient way to collect all relevant financial data for a company in a single call. It returns a dictionary containing:</p> <pre><code>{\n  \"company_profile\": [...],\n  \"income_statement\": [...],\n  \"balance_sheet\": [...],\n  \"cash_flow\": [...],\n  \"key_metrics\": [...],\n  \"financial_ratios\": [...],\n  \"stock_price\": {...},\n  \"analyst_estimates\": [...]\n}\n</code></pre>"},{"location":"modules/data_collector/#error-handling","title":"Error Handling","text":"<p>The Data Collector implements robust error handling:</p> <ol> <li>API errors are caught and wrapped in a standardized format</li> <li>Network issues are handled gracefully with appropriate error messages</li> <li>Missing data is represented as empty lists rather than null values</li> <li>Rate limiting and retry logic is implemented where appropriate</li> </ol> <p>Example error handling: <pre><code>try:\n    response = self.provider.get_income_statement(ticker, period, limit)\n    return response\nexcept Exception as e:\n    logger.error(f\"Error retrieving income statement for {ticker}: {str(e)}\")\n    return []\n</code></pre></p>"},{"location":"modules/data_collector/#data-provider-integration","title":"Data Provider Integration","text":"<p>The Data Collector uses the FinancialDataProvider tool, which can be extended to support multiple data providers:</p> <pre><code># Default provider - Financial Modeling Prep\ndata = self.provider.get_income_statement(ticker, period, limit)\n\n# With provider selection\ndata = self.alternative_provider.get_income_statement(ticker, period, limit)\n</code></pre>"},{"location":"modules/data_collector/#example-usage","title":"Example Usage","text":"<pre><code>from modules.data_collector import FinancialDataCollector\n\n# Initialize the collector\ncollector = FinancialDataCollector()\n\n# Get basic company information\nprofile = collector.get_company_profile(\"AAPL\")\ncompany_name = profile[0][\"companyName\"] if profile else \"Unknown\"\nprint(f\"Analyzing: {company_name}\")\n\n# Get financial statements\nincome_data = collector.get_income_statement(\"AAPL\", period=\"annual\", limit=3)\nbalance_data = collector.get_balance_sheet(\"AAPL\", period=\"annual\", limit=3)\ncash_flow_data = collector.get_cash_flow(\"AAPL\", period=\"annual\", limit=3)\n\n# Get all data at once\nall_data = collector.get_comprehensive_data(\"AAPL\")\n\n# Extract specific metrics\nif income_data:\n    latest_revenue = income_data[0][\"revenue\"]\n    print(f\"Latest Annual Revenue: ${latest_revenue:,}\")\n</code></pre>"},{"location":"modules/data_collector/#best-practices","title":"Best Practices","text":"<p>When using the Data Collector module:</p> <ol> <li>Cache responses when appropriate to reduce API calls</li> <li>Handle empty results since not all companies have complete data</li> <li>Use appropriate periods (annual for long-term analysis, quarterly for recent trends)</li> <li>Validate data before analysis as formats can occasionally change</li> <li>Respect API rate limits by throttling requests or implementing delays</li> </ol>"},{"location":"modules/financial_analyzer/","title":"Financial Analyzer Module","text":"<p>The Financial Analyzer module provides comprehensive analysis of financial data through algorithms and computational techniques. This module calculates key financial metrics, identifies trends, and generates quantitative insights without using LLM capabilities.</p>"},{"location":"modules/financial_analyzer/#overview","title":"Overview","text":"<p>The Financial Analyzer takes raw financial data (income statements, balance sheets, cash flow statements, etc.) and performs various analyses to extract meaningful quantitative insights. It serves as the computational engine behind the Analysis Agent's financial assessments.</p>"},{"location":"modules/financial_analyzer/#implementation","title":"Implementation","text":"<pre><code>class FinancialAnalyzer:\n    \"\"\"Module for analyzing financial data.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the financial analyzer.\"\"\"\n        pass\n\n    def analyze_income_statement(self, income_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze income statement data.\"\"\"\n        # Implementation details...\n\n    def analyze_balance_sheet(self, balance_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze balance sheet data.\"\"\"\n        # Implementation details...\n\n    def analyze_cash_flow(self, cash_flow_data: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze cash flow statement data.\"\"\"\n        # Implementation details...\n\n    def analyze_technical_data(self, technical_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze technical indicators data.\"\"\"\n        # Implementation details...\n\n    def comprehensive_analysis(self, financial_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Perform comprehensive analysis of financial data.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"modules/financial_analyzer/#key-analysis-functions","title":"Key Analysis Functions","text":""},{"location":"modules/financial_analyzer/#income-statement-analysis","title":"Income Statement Analysis","text":"<p>The <code>analyze_income_statement</code> method calculates:</p> <ul> <li>Revenue growth rates year-over-year</li> <li>Net income growth rates</li> <li>Gross, operating, and profit margins</li> <li>Expense ratios and their trends</li> </ul> <p>Example output: <pre><code>{\n  \"summary\": {\n    \"latest_year\": \"2023-09-30\",\n    \"latest_revenue\": 383946000000,\n    \"latest_net_income\": 96995000000\n  },\n  \"growth\": {\n    \"revenue_growth\": 2.02,\n    \"net_income_growth\": -3.36\n  },\n  \"margins\": {\n    \"gross_margin\": 46.21,\n    \"operating_margin\": 31.51,\n    \"profit_margin\": 24.79\n  },\n  \"trends\": [...]\n}\n</code></pre></p>"},{"location":"modules/financial_analyzer/#balance-sheet-analysis","title":"Balance Sheet Analysis","text":"<p>The <code>analyze_balance_sheet</code> method calculates:</p> <ul> <li>Liquidity ratios (current ratio, quick ratio)</li> <li>Solvency metrics (debt-to-equity, debt-to-assets)</li> <li>Asset turnover and efficiency metrics</li> <li>Working capital analysis</li> </ul> <p>Example output: <pre><code>{\n  \"summary\": {\n    \"latest_date\": \"2023-09-30\",\n    \"total_assets\": 352583000000,\n    \"total_liabilities\": 290448000000,\n    \"stockholders_equity\": 62135000000\n  },\n  \"ratios\": {\n    \"current_ratio\": 0.89,\n    \"debt_to_assets\": 0.82,\n    \"return_on_assets\": 0.18\n  },\n  \"trends\": [...]\n}\n</code></pre></p>"},{"location":"modules/financial_analyzer/#cash-flow-analysis","title":"Cash Flow Analysis","text":"<p>The <code>analyze_cash_flow</code> method calculates:</p> <ul> <li>Free cash flow and its trends</li> <li>Operating cash flow analysis</li> <li>Cash flow to income ratios</li> <li>Capital expenditure analysis</li> <li>Cash generation efficiency</li> </ul> <p>Example output: <pre><code>{\n  \"summary\": {\n    \"latest_date\": \"2023-09-30\",\n    \"operating_cash_flow\": 118283000000,\n    \"investing_cash_flow\": -22645000000,\n    \"financing_cash_flow\": -95028000000\n  },\n  \"metrics\": {\n    \"free_cash_flow\": 109083000000,\n    \"capital_expenditure\": 9200000000\n  },\n  \"trends\": [...]\n}\n</code></pre></p>"},{"location":"modules/financial_analyzer/#technical-indicator-analysis","title":"Technical Indicator Analysis","text":"<p>The <code>analyze_technical_data</code> method processes various technical indicators:</p> <ul> <li>Moving averages (SMA, EMA)</li> <li>Relative Strength Index (RSI)</li> <li>Moving Average Convergence Divergence (MACD)</li> <li>Analysis of recent trends and signals</li> </ul> <p>Example output: <pre><code>{\n  \"sma\": {\n    \"latest_value\": 187.32,\n    \"average_value\": 183.47,\n    \"recent_trend\": \"up\",\n    \"recent_values\": [...]\n  },\n  \"rsi\": {\n    \"latest_value\": 54.78,\n    \"average_value\": 51.23,\n    \"recent_trend\": \"down\",\n    \"recent_values\": [...]\n  }\n}\n</code></pre></p>"},{"location":"modules/financial_analyzer/#comprehensive-analysis","title":"Comprehensive Analysis","text":"<p>The <code>comprehensive_analysis</code> method combines all individual analyses:</p> <ol> <li>Analyzes income statement, balance sheet, and cash flow statement</li> <li>Processes technical indicators if available</li> <li>Creates a comprehensive summary of the company's financial health</li> <li>Returns a structured analysis result with all metrics organized logically</li> </ol>"},{"location":"modules/financial_analyzer/#data-handling","title":"Data Handling","text":"<p>The Financial Analyzer uses several techniques to ensure robust data handling:</p> <ul> <li>NumPy Type Handling: Special handling for NumPy data types when analyzing Pandas DataFrames</li> <li>Missing Data Protection: Checks for missing or <code>null</code> values before calculations</li> <li>Exception Handling: Each analysis method catches and reports exceptions without halting the entire analysis</li> <li>Clean DataFrames: Uses <code>clean_and_convert_numeric</code> from Data Transformer to standardize data types</li> </ul>"},{"location":"modules/financial_analyzer/#key-calculations","title":"Key Calculations","text":""},{"location":"modules/financial_analyzer/#growth-metrics","title":"Growth Metrics","text":"<pre><code># Year-over-year revenue growth\ndf['revenue_growth'] = df['revenue'].pct_change(-1) * 100\n</code></pre>"},{"location":"modules/financial_analyzer/#margin-calculations","title":"Margin Calculations","text":"<pre><code># Gross margin calculation\nif 'grossProfit' in df.columns and 'revenue' in df.columns:\n    df['gross_margin'] = (df['grossProfit'] / df['revenue']) * 100\n</code></pre>"},{"location":"modules/financial_analyzer/#ratio-calculations","title":"Ratio Calculations","text":"<pre><code># Current ratio calculation\nif 'totalCurrentAssets' in df.columns and 'totalCurrentLiabilities' in df.columns:\n    df['current_ratio'] = df['totalCurrentAssets'] / df['totalCurrentLiabilities']\n</code></pre>"},{"location":"modules/financial_analyzer/#free-cash-flow","title":"Free Cash Flow","text":"<pre><code># Free cash flow calculation\nif 'netCashProvidedByOperatingActivities' in df.columns and 'capitalExpenditure' in df.columns:\n    df['free_cash_flow'] = df['netCashProvidedByOperatingActivities'] - df['capitalExpenditure']\n</code></pre>"},{"location":"modules/financial_analyzer/#example-usage","title":"Example Usage","text":"<pre><code>from modules.financial_analyzer import FinancialAnalyzer\n\n# Initialize the analyzer\nanalyzer = FinancialAnalyzer()\n\n# Analyze an income statement\nincome_analysis = analyzer.analyze_income_statement(income_statement_data)\nprint(f\"Revenue growth: {income_analysis['growth']['revenue_growth']}%\")\nprint(f\"Profit margin: {income_analysis['margins']['profit_margin']}%\")\n\n# Perform comprehensive analysis\nresults = analyzer.comprehensive_analysis(all_financial_data)\n</code></pre>"},{"location":"modules/financial_analyzer/#error-handling","title":"Error Handling","text":"<p>The Financial Analyzer implements robust error handling:</p> <ol> <li>Each analysis method is wrapped in try-except blocks</li> <li>Errors are logged with detailed information</li> <li>Partial results are returned when possible instead of failing entirely</li> <li>Error messages are included in the output for troubleshooting</li> </ol> <p>Example error handling: <pre><code>try:\n    # Analysis calculations\n    # ...\nexcept Exception as e:\n    logger.error(f\"Error analyzing income statement: {str(e)}\")\n    return {\"error\": f\"Analysis failed: {str(e)}\"}\n</code></pre></p>"},{"location":"modules/financial_analyzer/#integration-with-other-components","title":"Integration with Other Components","text":"<p>The Financial Analyzer is primarily used by:</p> <ol> <li>Analysis Agent: For computational analysis of financial data</li> <li>Fact Check Agent: For validating numerical claims in reports</li> </ol> <p>However, it's designed to be usable independently from the agent system for standalone financial analysis tasks.</p>"},{"location":"testing/","title":"Testing Framework","text":""},{"location":"testing/#overview","title":"Overview","text":"<p>The Financial Analysis System uses pytest as its primary testing framework, with comprehensive test coverage across all major components. The testing infrastructure is designed to ensure reliability and maintainability of the system.</p>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 agents/                     # Agent component tests\n\u2502   \u251c\u2500\u2500 test_data_collection_agent.py\n\u2502   \u251c\u2500\u2500 test_report_agent.py\n\u2502   \u2514\u2500\u2500 test_research_agent.py\n\u251c\u2500\u2500 modules/                    # Core module tests\n\u2502   \u2514\u2500\u2500 test_financial_analyzer.py\n\u251c\u2500\u2500 tools/                     # Utility tests\n\u2502   \u2514\u2500\u2500 test_data_transformer.py\n\u251c\u2500\u2500 conftest.py               # Shared test fixtures\n\u251c\u2500\u2500 test_orchestrator.py      # Main orchestrator tests\n\u2514\u2500\u2500 test_orchestrator_file_ops.py\n</code></pre>"},{"location":"testing/#test-fixtures","title":"Test Fixtures","text":"<p>Common test fixtures are defined in <code>conftest.py</code> and provide standardized test data:</p> <ul> <li><code>sample_income_statement</code>: Mock income statement data</li> <li><code>sample_balance_sheet</code>: Mock balance sheet data</li> <li><code>sample_cash_flow</code>: Mock cash flow statement</li> <li><code>sample_technical_data</code>: Mock technical indicators</li> <li><code>sample_company_profile</code>: Mock company information</li> <li><code>sample_financial_data</code>: Combined financial dataset</li> <li><code>mock_llm_response</code>: Mock LLM API responses</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npython -m pytest\n\n# Run specific test file\npython -m pytest tests/modules/test_financial_analyzer.py\n\n# Run with coverage report\npython -m pytest --cov=.\n\n# Run with detailed output\npython -m pytest -v\n</code></pre>"},{"location":"testing/#setting-up-tests","title":"Setting Up Tests","text":"<p>Before running tests, make sure your environment is properly set up:</p> <pre><code># Install the package in development mode\npip install -e .\n\n# Run the tests\npython -m pytest\n</code></pre> <p>This ensures that Python can properly find all modules and packages within the project.</p>"},{"location":"testing/#test-categories","title":"Test Categories","text":""},{"location":"testing/#agent-tests","title":"Agent Tests","text":"<ul> <li>Test API interactions</li> <li>Verify error handling</li> <li>Check data transformations</li> <li>Validate agent-specific logic</li> </ul>"},{"location":"testing/#module-tests","title":"Module Tests","text":"<ul> <li>Test financial calculations</li> <li>Verify data analysis methods</li> <li>Check error handling</li> <li>Validate output formats</li> </ul>"},{"location":"testing/#tool-tests","title":"Tool Tests","text":"<ul> <li>Test data cleaning utilities</li> <li>Verify type conversions</li> <li>Check serialization methods</li> <li>Validate transformation logic</li> </ul>"},{"location":"testing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test component interactions</li> <li>Verify end-to-end workflows</li> <li>Check file operations</li> <li>Validate orchestration logic</li> </ul>"},{"location":"testing/coverage/","title":"Test Coverage","text":""},{"location":"testing/coverage/#coverage-requirements","title":"Coverage Requirements","text":"<ul> <li>Overall project coverage: minimum 80%</li> <li>Critical components coverage: minimum 90%</li> <li>Financial calculations</li> <li>Data transformation</li> <li>API integrations</li> </ul>"},{"location":"testing/coverage/#checking-coverage","title":"Checking Coverage","text":"<pre><code># Generate coverage report\npython -m pytest --cov=. --cov-report=html\n\n# Check coverage with minimum requirement\npython -m pytest --cov=. --cov-fail-under=80\n</code></pre>"},{"location":"testing/coverage/#current-coverage-summary","title":"Current Coverage Summary","text":"Module Coverage Financial Analyzer 95% Data Transformer 98% Report Agent 92% Research Agent 88% Data Collection Agent 94% Orchestrator 91%"},{"location":"testing/coverage/#areas-requiring-testing","title":"Areas Requiring Testing","text":"<ol> <li>Edge Cases</li> <li>Invalid input handling</li> <li>API error responses</li> <li> <p>Missing data scenarios</p> </li> <li> <p>Integration Points</p> </li> <li>Agent interactions</li> <li>File operations</li> <li> <p>External API calls</p> </li> <li> <p>Error Handling</p> </li> <li>Exception handling</li> <li>Fallback behaviors</li> <li>Recovery mechanisms</li> </ol>"},{"location":"testing/writing-tests/","title":"Writing Tests","text":""},{"location":"testing/writing-tests/#test-structure","title":"Test Structure","text":"<p>All test files should follow this basic structure:</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\n\nclass TestComponent:\n    \"\"\"Tests for the Component.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Setup for each test method.\"\"\"\n        self.component = Component()\n\n    def test_specific_functionality(self):\n        \"\"\"Test description.\"\"\"\n        # Setup\n        input_data = {...}\n\n        # Execute\n        result = self.component.method(input_data)\n\n        # Assert\n        assert result[\"expected_key\"] == expected_value\n</code></pre>"},{"location":"testing/writing-tests/#using-fixtures","title":"Using Fixtures","text":"<pre><code>def test_with_fixture(sample_financial_data):\n    \"\"\"Test using shared fixture.\"\"\"\n    result = analyze(sample_financial_data)\n    assert \"analysis\" in result\n</code></pre>"},{"location":"testing/writing-tests/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<pre><code>@patch('requests.get')\ndef test_api_call(mock_get):\n    \"\"\"Test API interaction.\"\"\"\n    mock_get.return_value.json.return_value = {\"data\": \"test\"}\n    result = fetch_data()\n    assert result[\"data\"] == \"test\"\n</code></pre>"},{"location":"testing/writing-tests/#best-practices","title":"Best Practices","text":"<ol> <li>Test Names: Use descriptive names that indicate what is being tested</li> <li>Assertions: Make specific assertions that verify exact conditions</li> <li>Setup: Use <code>setup_method</code> for common initialization</li> <li>Mocking: Mock external dependencies to isolate tests</li> <li>Documentation: Include docstrings explaining test purpose</li> </ol>"},{"location":"tools/","title":"Tools Overview","text":"<p>Tools in the Financial Analysis System provide utility functions and services that support the agents and modules. They handle specific tasks such as data transformation, API communication, and web research.</p>"},{"location":"tools/#available-tools","title":"Available Tools","text":""},{"location":"tools/#data-transformer","title":"Data Transformer","text":"<p>The Data Transformer tool manages data type conversion and provides utilities for handling NumPy and Pandas data types:</p> <ul> <li>Converts NumPy types to native Python types for JSON serialization</li> <li>Cleans and standardizes DataFrame content</li> <li>Provides a custom JSON encoder for handling complex data types</li> <li>Prevents common serialization errors when working with financial data</li> </ul> <p>This tool is crucial for ensuring that data can be properly serialized when passing between agents or when saving results to files.</p>"},{"location":"tools/#financial-data-provider","title":"Financial Data Provider","text":"<p>The Financial Data Provider tool handles communication with financial data APIs:</p> <ul> <li>Retrieves financial statements, metrics, and stock prices</li> <li>Manages API authentication and rate limiting</li> <li>Standardizes responses from data providers</li> <li>Handles errors and network issues gracefully</li> </ul> <p>This tool serves as the interface between the system and external financial data sources.</p>"},{"location":"tools/#web-research-tool","title":"Web Research Tool","text":"<p>The Web Research Tool facilitates web-based research for gathering market information:</p> <ul> <li>Performs web searches using search APIs</li> <li>Collects news articles and industry information</li> <li>Filters and formats search results</li> <li>Manages API rate limits and authentication</li> </ul> <p>This tool is primarily used by the Research Agent to gather non-financial information about companies and industries.</p>"},{"location":"tools/#tool-design-principles","title":"Tool Design Principles","text":"<p>The tools in the system follow several key design principles:</p> <ol> <li>Single Responsibility: Each tool focuses on a specific set of related functions</li> <li>Error Resilience: Tools handle errors gracefully without crashing the overall system</li> <li>Configuration Flexibility: Tools can be configured via environment variables or configuration files</li> <li>Consistent Interfaces: Tools provide clear, consistent APIs for the rest of the system</li> <li>Reusability: Tools are designed to be reusable across different parts of the system</li> </ol>"},{"location":"tools/#adding-new-tools","title":"Adding New Tools","text":"<p>To add a new tool to the system:</p> <ol> <li>Create a new Python file in the <code>tools</code> directory</li> <li>Implement a class with appropriate methods for the tool's functionality</li> <li>Add error handling and logging</li> <li>Update the documentation</li> <li>Import and use the tool in relevant agents or modules</li> </ol>"},{"location":"tools/#tool-configuration","title":"Tool Configuration","text":"<p>Tools can be configured through environment variables defined in the <code>.env</code> file or through the central <code>config.py</code> file. For example:</p> <pre><code># In config.py\nFMP_BASE_URL = os.getenv('FMP_BASE_URL', \"https://financialmodelingprep.com/api/v3\")\nMAX_SEARCH_RESULTS = 10\n\n# In a tool implementation\nfrom config import FMP_BASE_URL, MAX_SEARCH_RESULTS\n\nclass SomeTool:\n    def __init__(self):\n        self.base_url = FMP_BASE_URL\n        self.max_results = MAX_SEARCH_RESULTS\n</code></pre>"},{"location":"tools/#example-usage","title":"Example Usage","text":"<p>Here's how different tools might be used together:</p> <pre><code>from tools.financial_data_provider import FinancialDataProvider\nfrom tools.data_transformer import convert_numpy_types, NumpyEncoder\nimport json\n\n# Get financial data\nprovider = FinancialDataProvider()\nincome_statement = provider.get_income_statement(\"AAPL\")\n\n# Convert NumPy types for serialization\nsafe_data = convert_numpy_types(income_statement)\n\n# Serialize the data\njson_data = json.dumps(safe_data, indent=2)\n\n# Or use the custom encoder directly\njson_data = json.dumps(income_statement, cls=NumpyEncoder, indent=2)\n</code></pre>"},{"location":"tools/data_transformer/","title":"Data Transformer","text":"<p>The Data Transformer tool handles conversion between different data formats and ensures proper type handling, especially when working with Pandas DataFrames and NumPy arrays. It's a critical component for preventing JSON serialization errors when working with numerical data.</p>"},{"location":"tools/data_transformer/#key-functions","title":"Key Functions","text":""},{"location":"tools/data_transformer/#convert_numpy_typesobj","title":"<code>convert_numpy_types(obj)</code>","text":"<p>This recursive function converts NumPy data types to native Python types, which is essential when:</p> <ul> <li>Serializing data to JSON</li> <li>Preparing data to send to the LLM</li> <li>Storing data in dictionaries that will later be serialized</li> </ul> <p>Example usage: <pre><code>import numpy as np\nfrom tools.data_transformer import convert_numpy_types\n\n# Data with NumPy types\ndata = {\n    \"value\": np.int64(42),\n    \"array\": np.array([1, 2, 3]),\n    \"nested\": {\n        \"float_value\": np.float64(3.14)\n    }\n}\n\n# Convert to Python native types\nserializable_data = convert_numpy_types(data)\n# Now safe to use with json.dumps()\n</code></pre></p>"},{"location":"tools/data_transformer/#clean_and_convert_numericdf","title":"<code>clean_and_convert_numeric(df)</code>","text":"<p>This function cleans a Pandas DataFrame by attempting to convert columns to the appropriate data types:</p> <ol> <li>First, it tries to convert columns to numeric types</li> <li>For columns that can't be converted to numeric, it attempts to convert them to datetime</li> <li>It returns a new DataFrame without modifying the original</li> </ol> <p>Example usage: <pre><code>import pandas as pd\nfrom tools.data_transformer import clean_and_convert_numeric\n\n# DataFrame with mixed types\ndf = pd.DataFrame({\n    'value': ['1', '2', '3'],\n    'date': ['2023-01-01', '2023-01-02', '2023-01-03'],\n    'text': ['a', 'b', 'c']\n})\n\n# Clean and convert to appropriate types\ncleaned_df = clean_and_convert_numeric(df)\n# Now 'value' will be numeric and 'date' will be datetime\n</code></pre></p>"},{"location":"tools/data_transformer/#dataframe_to_dictdf","title":"<code>dataframe_to_dict(df)</code>","text":"<p>Converts a Pandas DataFrame to a list of dictionaries, ensuring all values are JSON-serializable:</p> <ol> <li>Converts the DataFrame to records format (list of dictionaries)</li> <li>Applies <code>convert_numpy_types</code> to handle any NumPy data types</li> </ol> <p>Example usage: <pre><code>import pandas as pd\nfrom tools.data_transformer import dataframe_to_dict\n\n# Create a DataFrame\ndf = pd.DataFrame({\n    'id': [1, 2, 3],\n    'value': [10.5, 20.7, 30.2]\n})\n\n# Convert to list of dictionaries with serializable types\nrecords = dataframe_to_dict(df)\n</code></pre></p>"},{"location":"tools/data_transformer/#custom-json-encoder","title":"Custom JSON Encoder","text":""},{"location":"tools/data_transformer/#numpyencoder","title":"<code>NumpyEncoder</code>","text":"<p>A custom JSON encoder that handles NumPy types. Use this when you need to serialize objects containing NumPy types:</p> <p>Example usage: <pre><code>import json\nimport numpy as np\nfrom tools.data_transformer import NumpyEncoder\n\n# Data with NumPy types\ndata = {\n    \"value\": np.int64(42),\n    \"array\": np.array([1, 2, 3])\n}\n\n# Serialize using custom encoder\njson_str = json.dumps(data, cls=NumpyEncoder, indent=2)\n</code></pre></p>"},{"location":"tools/data_transformer/#common-issues","title":"Common Issues","text":""},{"location":"tools/data_transformer/#json-serialization-errors","title":"JSON Serialization Errors","text":"<p>If you encounter a <code>TypeError: Object of type int64 is not JSON serializable</code> error, you need to use the Data Transformer:</p> <pre><code># Wrong approach - will cause error\njson_str = json.dumps(data_with_numpy_types)\n\n# Correct approach - Option 1\nfrom tools.data_transformer import convert_numpy_types\nsafe_data = convert_numpy_types(data_with_numpy_types)\njson_str = json.dumps(safe_data)\n\n# Correct approach - Option 2\nfrom tools.data_transformer import NumpyEncoder\njson_str = json.dumps(data_with_numpy_types, cls=NumpyEncoder)\n</code></pre>"},{"location":"tools/data_transformer/#working-with-llms","title":"Working with LLMs","text":"<p>When sending data from Pandas DataFrames or NumPy arrays to an LLM:</p> <pre><code>from tools.data_transformer import convert_numpy_types\n\n# Always convert data before including it in prompts\nsafe_data = convert_numpy_types(analysis_results)\nprompt = f\"\"\"\nAnalyze this financial data:\n{json.dumps(safe_data, indent=2)}\n\"\"\"\n</code></pre>"},{"location":"tools/data_transformer/#best-practices","title":"Best Practices","text":"<ol> <li>Always use <code>convert_numpy_types</code> before serializing data that might contain NumPy types</li> <li>Use <code>clean_and_convert_numeric</code> when preparing DataFrames for analysis</li> <li>Consider using the <code>NumpyEncoder</code> in your JSON dumps calls throughout the application</li> <li>Be aware that Pandas operations often return NumPy types even if input data was native Python</li> </ol>"},{"location":"tools/financial_data_provider/","title":"Financial Data Provider","text":"<p>The Financial Data Provider tool is responsible for communicating with financial data APIs to retrieve company financial information. It serves as the primary interface between the system and external financial data sources.</p>"},{"location":"tools/financial_data_provider/#overview","title":"Overview","text":"<p>The Financial Data Provider simplifies API interactions by providing a consistent interface for retrieving various types of financial data. It handles authentication, request formatting, error handling, and response processing.</p>"},{"location":"tools/financial_data_provider/#implementation","title":"Implementation","text":"<pre><code>class FinancialDataProvider:\n    \"\"\"Provider for financial data from the Financial Modeling Prep API.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the financial data provider with API key.\"\"\"\n        self.api_key = FMP_API_KEY\n        if not self.api_key:\n            logger.warning(\"FMP_API_KEY not found in environment variables\")\n        self.base_url = FMP_BASE_URL\n\n    def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -&gt; Dict[str, Any]:\n        \"\"\"Make a request to the FMP API.\"\"\"\n        # Implementation details...\n\n    # Methods for different financial data types\n    def get_company_profile(self, ticker: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get company profile information.\"\"\"\n        # Implementation details...\n\n    def get_income_statement(self, ticker: str, period: str = \"annual\", limit: int = 5) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get income statement data.\"\"\"\n        # Implementation details...\n\n    # ...additional methods for other data types...\n</code></pre>"},{"location":"tools/financial_data_provider/#key-api-methods","title":"Key API Methods","text":""},{"location":"tools/financial_data_provider/#api-request-handler","title":"API Request Handler","text":"<p>The <code>_make_request</code> method is the core of the Financial Data Provider, handling the actual HTTP requests:</p> <pre><code>def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Make a request to the FMP API.\n\n    Args:\n        endpoint (str): API endpoint to call\n        params (dict, optional): Query parameters\n\n    Returns:\n        dict: Response data\n    \"\"\"\n    if params is None:\n        params = {}\n\n    # Add API key to parameters\n    params['apikey'] = self.api_key\n\n    url = f\"{self.base_url}/{endpoint}\"\n\n    try:\n        response = requests.get(url, params=params)\n        response.raise_for_status()  # Raise exception for 4XX/5XX responses\n        return response.json()\n    except requests.exceptions.HTTPError as e:\n        logger.error(f\"HTTP error when calling {url}: {str(e)}\")\n        return {\"error\": str(e)}\n    except requests.exceptions.RequestException as e:\n        logger.error(f\"Request error when calling {url}: {str(e)}\")\n        return {\"error\": str(e)}\n    except json.JSONDecodeError:\n        logger.error(f\"Failed to decode JSON response from {url}\")\n        return {\"error\": \"Invalid JSON response\"}\n</code></pre>"},{"location":"tools/financial_data_provider/#data-retrieval-methods","title":"Data Retrieval Methods","text":"<p>The provider includes methods for retrieving various types of financial data:</p> <ol> <li>Company Profile: Basic information about a company (name, sector, description)</li> <li>Financial Statements: Income statements, balance sheets, and cash flow statements</li> <li>Financial Metrics: Key metrics, ratios, and indicators</li> <li>Stock Data: Price data, technical indicators, and analyst estimates</li> </ol> <p>Each method follows the same pattern: 1. Construct an API endpoint with the ticker symbol 2. Add any additional parameters (period, limit) 3. Make the API request 4. Return the structured response</p>"},{"location":"tools/financial_data_provider/#api-integration","title":"API Integration","text":"<p>The current implementation uses the Financial Modeling Prep API for financial data, but the provider is designed to be extensible for other data sources:</p> <pre><code># Current implementation with FMP\nendpoint = f\"income-statement/{ticker}\"\nparams = {\"period\": period, \"limit\": limit}\nreturn self._make_request(endpoint, params)\n\n# Future implementation could add alternate providers\nif self.provider == \"alphavantage\":\n    endpoint = f\"query\"\n    params = {\"function\": \"INCOME_STATEMENT\", \"symbol\": ticker, \"apikey\": self.api_key}\n    return self._make_alternate_request(endpoint, params)\n</code></pre>"},{"location":"tools/financial_data_provider/#error-handling","title":"Error Handling","text":"<p>The provider includes comprehensive error handling:</p> <ol> <li>HTTP Errors: Status codes 4XX/5XX are caught and logged</li> <li>Network Errors: Connection issues are handled gracefully</li> <li>JSON Parsing Errors: Invalid responses are caught and reported</li> <li>API Key Validation: Missing API keys generate warnings</li> </ol> <p>All errors are logged with appropriate context information and returned as structured error objects:</p> <pre><code>{\"error\": \"HTTP Error 429: Too Many Requests - API rate limit exceeded\"}\n</code></pre>"},{"location":"tools/financial_data_provider/#configuration","title":"Configuration","text":"<p>The Financial Data Provider is configured using environment variables and the <code>config.py</code> file:</p> <pre><code># In config.py\nFMP_API_KEY = os.getenv('FMP_API_KEY')\nFMP_BASE_URL = os.getenv('FMP_BASE_URL', \"https://financialmodelingprep.com/api/v3\")\n\n# In provider implementation\nself.api_key = FMP_API_KEY\nself.base_url = FMP_BASE_URL\n</code></pre>"},{"location":"tools/financial_data_provider/#example-usage","title":"Example Usage","text":"<pre><code>from tools.financial_data_provider import FinancialDataProvider\n\n# Initialize the provider\nprovider = FinancialDataProvider()\n\n# Get company profile\nprofile = provider.get_company_profile(\"AAPL\")\nif \"error\" not in profile:\n    print(f\"Company: {profile[0].get('companyName')}\")\n    print(f\"Sector: {profile[0].get('sector')}\")\n\n# Get income statement\nincome_data = provider.get_income_statement(\"AAPL\", period=\"annual\", limit=3)\nif \"error\" not in income_data and income_data:\n    print(f\"Latest Revenue: ${income_data[0].get('revenue'):,}\")\n    print(f\"Latest Net Income: ${income_data[0].get('netIncome'):,}\")\n</code></pre>"},{"location":"tools/financial_data_provider/#rate-limiting","title":"Rate Limiting","text":"<p>The Financial Modeling Prep API has rate limits that vary by subscription level. The provider handles rate limit errors by returning them as structured error objects, but does not currently implement automatic retry logic or rate throttling.</p> <p>Future enhancements could include: - Implementing exponential backoff for retries - Adding a request queue with rate limiting - Caching responses to reduce duplicate API calls</p>"},{"location":"tools/financial_data_provider/#alternative-data-providers","title":"Alternative Data Providers","text":"<p>While the current implementation uses Financial Modeling Prep, the system could be extended to support other providers like:</p> <ul> <li>Alpha Vantage</li> <li>Yahoo Finance API</li> <li>Polygon.io</li> <li>Quandl</li> </ul> <p>Adding a new provider would involve creating a new provider class or extending the existing one with alternative API endpoints and response formatting.</p>"},{"location":"tools/web_research/","title":"Web Research Tool","text":"<p>The Web Research Tool enables the system to gather information from the web using search APIs. It's primarily used by the Research Agent to find news, articles, and other information about companies, industries, and market trends.</p>"},{"location":"tools/web_research/#overview","title":"Overview","text":"<p>The Web Research Tool simplifies the process of searching for and collecting information from the web. It provides a consistent interface for performing searches, processing results, and extracting relevant information.</p>"},{"location":"tools/web_research/#implementation","title":"Implementation","text":"<pre><code>class WebResearchTool:\n    \"\"\"Tool for conducting web research using search APIs.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the web research tool.\"\"\"\n        self.search_client = SearchClient()\n\n    def search_google(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]:\n        \"\"\"Perform a Google search query.\"\"\"\n        # Implementation details...\n\n    def search_news(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]:\n        \"\"\"Search for news articles.\"\"\"\n        # Implementation details...\n\n    def get_company_competitors(self, company: str, industry: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"Find competitors for a company.\"\"\"\n        # Implementation details...\n\n    def get_industry_trends(self, industry: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"Research industry trends.\"\"\"\n        # Implementation details...\n</code></pre>"},{"location":"tools/web_research/#key-features","title":"Key Features","text":""},{"location":"tools/web_research/#general-web-search","title":"General Web Search","text":"<p>The <code>search_google</code> method performs general web searches:</p> <pre><code>def search_google(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Perform a Google search query.\n\n    Args:\n        query (str): Search query\n        num_results (int): Number of results to return\n\n    Returns:\n        list: Search results\n    \"\"\"\n    try:\n        search_results = self.search_client.search(query, num=num_results)\n\n        # Extract organic results from the search response\n        organic_results = search_results.get(\"organic_results\", [])\n        if not organic_results:\n            return [{\"error\": \"No organic results found in search response\"}]\n\n        # Format the results\n        formatted_results = []\n        for result in organic_results[:num_results]:\n            formatted_results.append({\n                \"title\": result.get(\"title\", \"\"),\n                \"link\": result.get(\"link\", \"\"),\n                \"snippet\": result.get(\"snippet\", \"\"),\n                \"source\": result.get(\"source\", \"\")\n            })\n\n        return formatted_results\n\n    except Exception as e:\n        logger.error(f\"Error in search_google: {str(e)}\")\n        return [{\"error\": f\"Search error: {str(e)}\"}]\n</code></pre>"},{"location":"tools/web_research/#news-search","title":"News Search","text":"<p>The <code>search_news</code> method is specialized for finding news articles:</p> <pre><code>def search_news(self, query: str, num_results: int = 10) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Search for news articles.\n\n    Args:\n        query (str): Search query\n        num_results (int): Number of results to return\n\n    Returns:\n        list: News search results\n    \"\"\"\n    try:\n        news_results = self.search_client.get_news(query)\n\n        # Extract news results\n        news_items = news_results.get(\"news_results\", [])\n        if not news_items:\n            return [{\"error\": \"No news results found in search response\"}]\n\n        # Format the results\n        formatted_results = []\n        for item in news_items[:num_results]:\n            formatted_results.append({\n                \"title\": item.get(\"title\", \"\"),\n                \"link\": item.get(\"link\", \"\"),\n                \"snippet\": item.get(\"snippet\", \"\"),\n                \"source\": item.get(\"source\", {}).get(\"name\", \"\"),\n                \"date\": item.get(\"date\", \"\")\n            })\n\n        return formatted_results\n\n    except Exception as e:\n        logger.error(f\"Error in search_news: {str(e)}\")\n        return [{\"error\": f\"News search error: {str(e)}\"}]\n</code></pre>"},{"location":"tools/web_research/#specialized-research-methods","title":"Specialized Research Methods","text":"<p>The tool also provides methods for specific research tasks:</p> <ol> <li>Competitor Research: Find competitors for a specific company</li> <li>Industry Trends: Research trends within a particular industry </li> </ol> <p>These specialized methods build on the base search functionality but construct specific queries and process the results accordingly.</p>"},{"location":"tools/web_research/#search-client-integration","title":"Search Client Integration","text":"<p>The Web Research Tool uses a <code>SearchClient</code> class that wraps the actual search API (currently SerpAPI):</p> <pre><code>class SearchClient:\n    \"\"\"Client for making search API requests\"\"\"\n\n    def __init__(self):\n        self.api_key = os.getenv('SERPAPI_API_KEY')\n        self.base_url = \"https://serpapi.com/search\"\n\n    def search(self, query: str, **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Perform a search query using SerpApi\"\"\"\n        params = {\n            \"api_key\": self.api_key,\n            \"q\": query,\n            \"engine\": \"google\",\n            **kwargs\n        }\n\n        response = requests.get(self.base_url, params=params)\n        response.raise_for_status()\n        return response.json()\n\n    def get_news(self, query: str, **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Get news results for a query\"\"\"\n        return self.search(query, tbm=\"nws\", **kwargs)\n</code></pre> <p>This design allows for easy switching to different search providers in the future.</p>"},{"location":"tools/web_research/#error-handling","title":"Error Handling","text":"<p>The Web Research Tool includes robust error handling:</p> <ol> <li>Network Errors: Connection issues are caught and formatted as error objects</li> <li>API Errors: Errors from the search API are properly logged</li> <li>Empty Results: Cases where no results are found are handled gracefully</li> <li>Parsing Errors: Issues with processing search results are caught</li> </ol> <p>All errors are logged and returned as structured objects:</p> <pre><code>[{\"error\": \"Search error: API rate limit exceeded\"}]\n</code></pre>"},{"location":"tools/web_research/#example-usage","title":"Example Usage","text":"<pre><code>from tools.web_research import WebResearchTool\n\n# Initialize the tool\nresearch_tool = WebResearchTool()\n\n# Perform a general search\nresults = research_tool.search_google(\"Apple financial performance 2023\")\n\n# Check for errors\nif results and \"error\" in results[0]:\n    print(f\"Search error: {results[0]['error']}\")\nelse:\n    # Process the results\n    for result in results:\n        print(f\"Title: {result['title']}\")\n        print(f\"Link: {result['link']}\")\n        print(f\"Snippet: {result['snippet']}\\n\")\n\n# Search for news\nnews = research_tool.search_news(\"Apple earnings Q1 2023\")\nfor article in news:\n    print(f\"{article.get('title')} - {article.get('source')}\")\n</code></pre>"},{"location":"tools/web_research/#search-api-limitations","title":"Search API Limitations","text":"<p>Using search APIs like SerpAPI has some limitations:</p> <ol> <li>Cost: Search APIs typically charge per request</li> <li>Rate Limits: Most APIs impose request rate limitations</li> <li>Freshness: Results may not always include the very latest information</li> <li>Content Restrictions: Some content may not be indexed or accessible</li> </ol> <p>The Web Research Tool is designed to work within these constraints by: - Limiting the number of results returned by default - Providing focused search methods to get relevant results - Handling rate limiting errors gracefully - Processing results to extract the most relevant information</p>"},{"location":"tools/web_research/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements to the Web Research Tool include:</p> <ol> <li>Content Extraction: Retrieving and parsing the full content of articles</li> <li>Multiple Search Engines: Using multiple search providers for more comprehensive results</li> <li>Cached Results: Implementing caching to reduce duplicate API calls</li> <li>Result Ranking: Implementing custom relevance ranking beyond what the search API provides</li> <li>Content Classification: Automatically categorizing search results by topic or relevance</li> </ol>"}]}